// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: inqueue_journal.sql

package lrdb

import (
	"context"

	"github.com/google/uuid"
)

const inqueueJournalDelete = `-- name: InqueueJournalDelete :exec
DELETE FROM inqueue_journal
WHERE organization_id = $1
  AND bucket = $2
  AND object_id = $3
`

type InqueueJournalDeleteParams struct {
	OrganizationID uuid.UUID `json:"organization_id"`
	Bucket         string    `json:"bucket"`
	ObjectID       string    `json:"object_id"`
}

func (q *Queries) InqueueJournalDelete(ctx context.Context, arg InqueueJournalDeleteParams) error {
	_, err := q.db.Exec(ctx, inqueueJournalDelete, arg.OrganizationID, arg.Bucket, arg.ObjectID)
	return err
}

const inqueueJournalUpsert = `-- name: InqueueJournalUpsert :one
INSERT INTO inqueue_journal (organization_id, bucket, object_id)
VALUES ($1, $2, $3)
ON CONFLICT (organization_id, bucket, object_id)
  DO UPDATE SET updated_at = clock_timestamp()
RETURNING (updated_at = created_at) AS is_new
`

type InqueueJournalUpsertParams struct {
	OrganizationID uuid.UUID `json:"organization_id"`
	Bucket         string    `json:"bucket"`
	ObjectID       string    `json:"object_id"`
}

func (q *Queries) InqueueJournalUpsert(ctx context.Context, arg InqueueJournalUpsertParams) (bool, error) {
	row := q.db.QueryRow(ctx, inqueueJournalUpsert, arg.OrganizationID, arg.Bucket, arg.ObjectID)
	var is_new bool
	err := row.Scan(&is_new)
	return is_new, err
}
