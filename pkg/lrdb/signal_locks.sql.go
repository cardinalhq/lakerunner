// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: signal_locks.sql

package lrdb

import (
	"context"
)

const signalLockCleanup = `-- name: SignalLockCleanup :one
SELECT public.signal_lock_cleanup() as count
`

func (q *Queries) SignalLockCleanup(ctx context.Context) (int32, error) {
	row := q.db.QueryRow(ctx, signalLockCleanup)
	var count int32
	err := row.Scan(&count)
	return count, err
}
