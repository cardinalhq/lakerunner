// Copyright (C) 2025 CardinalHQ, Inc
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, version 3.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program. If not, see <http://www.gnu.org/licenses/>.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: admin.proto

package adminproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AdminService_Ping_FullMethodName                      = "/adminproto.AdminService/Ping"
	AdminService_InQueueStatus_FullMethodName             = "/adminproto.AdminService/InQueueStatus"
	AdminService_ListOrganizations_FullMethodName         = "/adminproto.AdminService/ListOrganizations"
	AdminService_CreateOrganization_FullMethodName        = "/adminproto.AdminService/CreateOrganization"
	AdminService_UpdateOrganization_FullMethodName        = "/adminproto.AdminService/UpdateOrganization"
	AdminService_GetConsumerLag_FullMethodName            = "/adminproto.AdminService/GetConsumerLag"
	AdminService_ListOrganizationAPIKeys_FullMethodName   = "/adminproto.AdminService/ListOrganizationAPIKeys"
	AdminService_CreateOrganizationAPIKey_FullMethodName  = "/adminproto.AdminService/CreateOrganizationAPIKey"
	AdminService_DeleteOrganizationAPIKey_FullMethodName  = "/adminproto.AdminService/DeleteOrganizationAPIKey"
	AdminService_ListOrganizationBuckets_FullMethodName   = "/adminproto.AdminService/ListOrganizationBuckets"
	AdminService_AddOrganizationBucket_FullMethodName     = "/adminproto.AdminService/AddOrganizationBucket"
	AdminService_DeleteOrganizationBucket_FullMethodName  = "/adminproto.AdminService/DeleteOrganizationBucket"
	AdminService_ListBucketConfigurations_FullMethodName  = "/adminproto.AdminService/ListBucketConfigurations"
	AdminService_CreateBucketConfiguration_FullMethodName = "/adminproto.AdminService/CreateBucketConfiguration"
	AdminService_DeleteBucketConfiguration_FullMethodName = "/adminproto.AdminService/DeleteBucketConfiguration"
	AdminService_ListBucketPrefixMappings_FullMethodName  = "/adminproto.AdminService/ListBucketPrefixMappings"
	AdminService_CreateBucketPrefixMapping_FullMethodName = "/adminproto.AdminService/CreateBucketPrefixMapping"
	AdminService_DeleteBucketPrefixMapping_FullMethodName = "/adminproto.AdminService/DeleteBucketPrefixMapping"
)

// AdminServiceClient is the client API for AdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminServiceClient interface {
	// Ping endpoint for connectivity testing
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	// Get inqueue status/summary
	InQueueStatus(ctx context.Context, in *InQueueStatusRequest, opts ...grpc.CallOption) (*InQueueStatusResponse, error)
	// List organizations in the system
	ListOrganizations(ctx context.Context, in *ListOrganizationsRequest, opts ...grpc.CallOption) (*ListOrganizationsResponse, error)
	// Create a new organization
	CreateOrganization(ctx context.Context, in *CreateOrganizationRequest, opts ...grpc.CallOption) (*CreateOrganizationResponse, error)
	// Update fields on an existing organization
	UpdateOrganization(ctx context.Context, in *UpdateOrganizationRequest, opts ...grpc.CallOption) (*UpdateOrganizationResponse, error)
	// Get Kafka consumer group lag information
	GetConsumerLag(ctx context.Context, in *GetConsumerLagRequest, opts ...grpc.CallOption) (*GetConsumerLagResponse, error)
	// Organization API Keys Management
	ListOrganizationAPIKeys(ctx context.Context, in *ListOrganizationAPIKeysRequest, opts ...grpc.CallOption) (*ListOrganizationAPIKeysResponse, error)
	CreateOrganizationAPIKey(ctx context.Context, in *CreateOrganizationAPIKeyRequest, opts ...grpc.CallOption) (*CreateOrganizationAPIKeyResponse, error)
	DeleteOrganizationAPIKey(ctx context.Context, in *DeleteOrganizationAPIKeyRequest, opts ...grpc.CallOption) (*DeleteOrganizationAPIKeyResponse, error)
	// Organization Buckets Management
	ListOrganizationBuckets(ctx context.Context, in *ListOrganizationBucketsRequest, opts ...grpc.CallOption) (*ListOrganizationBucketsResponse, error)
	AddOrganizationBucket(ctx context.Context, in *AddOrganizationBucketRequest, opts ...grpc.CallOption) (*AddOrganizationBucketResponse, error)
	DeleteOrganizationBucket(ctx context.Context, in *DeleteOrganizationBucketRequest, opts ...grpc.CallOption) (*DeleteOrganizationBucketResponse, error)
	// Bucket Configuration Management
	ListBucketConfigurations(ctx context.Context, in *ListBucketConfigurationsRequest, opts ...grpc.CallOption) (*ListBucketConfigurationsResponse, error)
	CreateBucketConfiguration(ctx context.Context, in *CreateBucketConfigurationRequest, opts ...grpc.CallOption) (*CreateBucketConfigurationResponse, error)
	DeleteBucketConfiguration(ctx context.Context, in *DeleteBucketConfigurationRequest, opts ...grpc.CallOption) (*DeleteBucketConfigurationResponse, error)
	// Bucket Prefix Mappings Management
	ListBucketPrefixMappings(ctx context.Context, in *ListBucketPrefixMappingsRequest, opts ...grpc.CallOption) (*ListBucketPrefixMappingsResponse, error)
	CreateBucketPrefixMapping(ctx context.Context, in *CreateBucketPrefixMappingRequest, opts ...grpc.CallOption) (*CreateBucketPrefixMappingResponse, error)
	DeleteBucketPrefixMapping(ctx context.Context, in *DeleteBucketPrefixMappingRequest, opts ...grpc.CallOption) (*DeleteBucketPrefixMappingResponse, error)
}

type adminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminServiceClient(cc grpc.ClientConnInterface) AdminServiceClient {
	return &adminServiceClient{cc}
}

func (c *adminServiceClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, AdminService_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) InQueueStatus(ctx context.Context, in *InQueueStatusRequest, opts ...grpc.CallOption) (*InQueueStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InQueueStatusResponse)
	err := c.cc.Invoke(ctx, AdminService_InQueueStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListOrganizations(ctx context.Context, in *ListOrganizationsRequest, opts ...grpc.CallOption) (*ListOrganizationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListOrganizationsResponse)
	err := c.cc.Invoke(ctx, AdminService_ListOrganizations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) CreateOrganization(ctx context.Context, in *CreateOrganizationRequest, opts ...grpc.CallOption) (*CreateOrganizationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateOrganizationResponse)
	err := c.cc.Invoke(ctx, AdminService_CreateOrganization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateOrganization(ctx context.Context, in *UpdateOrganizationRequest, opts ...grpc.CallOption) (*UpdateOrganizationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateOrganizationResponse)
	err := c.cc.Invoke(ctx, AdminService_UpdateOrganization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetConsumerLag(ctx context.Context, in *GetConsumerLagRequest, opts ...grpc.CallOption) (*GetConsumerLagResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetConsumerLagResponse)
	err := c.cc.Invoke(ctx, AdminService_GetConsumerLag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListOrganizationAPIKeys(ctx context.Context, in *ListOrganizationAPIKeysRequest, opts ...grpc.CallOption) (*ListOrganizationAPIKeysResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListOrganizationAPIKeysResponse)
	err := c.cc.Invoke(ctx, AdminService_ListOrganizationAPIKeys_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) CreateOrganizationAPIKey(ctx context.Context, in *CreateOrganizationAPIKeyRequest, opts ...grpc.CallOption) (*CreateOrganizationAPIKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateOrganizationAPIKeyResponse)
	err := c.cc.Invoke(ctx, AdminService_CreateOrganizationAPIKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) DeleteOrganizationAPIKey(ctx context.Context, in *DeleteOrganizationAPIKeyRequest, opts ...grpc.CallOption) (*DeleteOrganizationAPIKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteOrganizationAPIKeyResponse)
	err := c.cc.Invoke(ctx, AdminService_DeleteOrganizationAPIKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListOrganizationBuckets(ctx context.Context, in *ListOrganizationBucketsRequest, opts ...grpc.CallOption) (*ListOrganizationBucketsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListOrganizationBucketsResponse)
	err := c.cc.Invoke(ctx, AdminService_ListOrganizationBuckets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) AddOrganizationBucket(ctx context.Context, in *AddOrganizationBucketRequest, opts ...grpc.CallOption) (*AddOrganizationBucketResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddOrganizationBucketResponse)
	err := c.cc.Invoke(ctx, AdminService_AddOrganizationBucket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) DeleteOrganizationBucket(ctx context.Context, in *DeleteOrganizationBucketRequest, opts ...grpc.CallOption) (*DeleteOrganizationBucketResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteOrganizationBucketResponse)
	err := c.cc.Invoke(ctx, AdminService_DeleteOrganizationBucket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListBucketConfigurations(ctx context.Context, in *ListBucketConfigurationsRequest, opts ...grpc.CallOption) (*ListBucketConfigurationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBucketConfigurationsResponse)
	err := c.cc.Invoke(ctx, AdminService_ListBucketConfigurations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) CreateBucketConfiguration(ctx context.Context, in *CreateBucketConfigurationRequest, opts ...grpc.CallOption) (*CreateBucketConfigurationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateBucketConfigurationResponse)
	err := c.cc.Invoke(ctx, AdminService_CreateBucketConfiguration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) DeleteBucketConfiguration(ctx context.Context, in *DeleteBucketConfigurationRequest, opts ...grpc.CallOption) (*DeleteBucketConfigurationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteBucketConfigurationResponse)
	err := c.cc.Invoke(ctx, AdminService_DeleteBucketConfiguration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListBucketPrefixMappings(ctx context.Context, in *ListBucketPrefixMappingsRequest, opts ...grpc.CallOption) (*ListBucketPrefixMappingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBucketPrefixMappingsResponse)
	err := c.cc.Invoke(ctx, AdminService_ListBucketPrefixMappings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) CreateBucketPrefixMapping(ctx context.Context, in *CreateBucketPrefixMappingRequest, opts ...grpc.CallOption) (*CreateBucketPrefixMappingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateBucketPrefixMappingResponse)
	err := c.cc.Invoke(ctx, AdminService_CreateBucketPrefixMapping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) DeleteBucketPrefixMapping(ctx context.Context, in *DeleteBucketPrefixMappingRequest, opts ...grpc.CallOption) (*DeleteBucketPrefixMappingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteBucketPrefixMappingResponse)
	err := c.cc.Invoke(ctx, AdminService_DeleteBucketPrefixMapping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminServiceServer is the server API for AdminService service.
// All implementations must embed UnimplementedAdminServiceServer
// for forward compatibility.
type AdminServiceServer interface {
	// Ping endpoint for connectivity testing
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	// Get inqueue status/summary
	InQueueStatus(context.Context, *InQueueStatusRequest) (*InQueueStatusResponse, error)
	// List organizations in the system
	ListOrganizations(context.Context, *ListOrganizationsRequest) (*ListOrganizationsResponse, error)
	// Create a new organization
	CreateOrganization(context.Context, *CreateOrganizationRequest) (*CreateOrganizationResponse, error)
	// Update fields on an existing organization
	UpdateOrganization(context.Context, *UpdateOrganizationRequest) (*UpdateOrganizationResponse, error)
	// Get Kafka consumer group lag information
	GetConsumerLag(context.Context, *GetConsumerLagRequest) (*GetConsumerLagResponse, error)
	// Organization API Keys Management
	ListOrganizationAPIKeys(context.Context, *ListOrganizationAPIKeysRequest) (*ListOrganizationAPIKeysResponse, error)
	CreateOrganizationAPIKey(context.Context, *CreateOrganizationAPIKeyRequest) (*CreateOrganizationAPIKeyResponse, error)
	DeleteOrganizationAPIKey(context.Context, *DeleteOrganizationAPIKeyRequest) (*DeleteOrganizationAPIKeyResponse, error)
	// Organization Buckets Management
	ListOrganizationBuckets(context.Context, *ListOrganizationBucketsRequest) (*ListOrganizationBucketsResponse, error)
	AddOrganizationBucket(context.Context, *AddOrganizationBucketRequest) (*AddOrganizationBucketResponse, error)
	DeleteOrganizationBucket(context.Context, *DeleteOrganizationBucketRequest) (*DeleteOrganizationBucketResponse, error)
	// Bucket Configuration Management
	ListBucketConfigurations(context.Context, *ListBucketConfigurationsRequest) (*ListBucketConfigurationsResponse, error)
	CreateBucketConfiguration(context.Context, *CreateBucketConfigurationRequest) (*CreateBucketConfigurationResponse, error)
	DeleteBucketConfiguration(context.Context, *DeleteBucketConfigurationRequest) (*DeleteBucketConfigurationResponse, error)
	// Bucket Prefix Mappings Management
	ListBucketPrefixMappings(context.Context, *ListBucketPrefixMappingsRequest) (*ListBucketPrefixMappingsResponse, error)
	CreateBucketPrefixMapping(context.Context, *CreateBucketPrefixMappingRequest) (*CreateBucketPrefixMappingResponse, error)
	DeleteBucketPrefixMapping(context.Context, *DeleteBucketPrefixMappingRequest) (*DeleteBucketPrefixMappingResponse, error)
	mustEmbedUnimplementedAdminServiceServer()
}

// UnimplementedAdminServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAdminServiceServer struct{}

func (UnimplementedAdminServiceServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedAdminServiceServer) InQueueStatus(context.Context, *InQueueStatusRequest) (*InQueueStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InQueueStatus not implemented")
}
func (UnimplementedAdminServiceServer) ListOrganizations(context.Context, *ListOrganizationsRequest) (*ListOrganizationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizations not implemented")
}
func (UnimplementedAdminServiceServer) CreateOrganization(context.Context, *CreateOrganizationRequest) (*CreateOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganization not implemented")
}
func (UnimplementedAdminServiceServer) UpdateOrganization(context.Context, *UpdateOrganizationRequest) (*UpdateOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrganization not implemented")
}
func (UnimplementedAdminServiceServer) GetConsumerLag(context.Context, *GetConsumerLagRequest) (*GetConsumerLagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConsumerLag not implemented")
}
func (UnimplementedAdminServiceServer) ListOrganizationAPIKeys(context.Context, *ListOrganizationAPIKeysRequest) (*ListOrganizationAPIKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationAPIKeys not implemented")
}
func (UnimplementedAdminServiceServer) CreateOrganizationAPIKey(context.Context, *CreateOrganizationAPIKeyRequest) (*CreateOrganizationAPIKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganizationAPIKey not implemented")
}
func (UnimplementedAdminServiceServer) DeleteOrganizationAPIKey(context.Context, *DeleteOrganizationAPIKeyRequest) (*DeleteOrganizationAPIKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganizationAPIKey not implemented")
}
func (UnimplementedAdminServiceServer) ListOrganizationBuckets(context.Context, *ListOrganizationBucketsRequest) (*ListOrganizationBucketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationBuckets not implemented")
}
func (UnimplementedAdminServiceServer) AddOrganizationBucket(context.Context, *AddOrganizationBucketRequest) (*AddOrganizationBucketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOrganizationBucket not implemented")
}
func (UnimplementedAdminServiceServer) DeleteOrganizationBucket(context.Context, *DeleteOrganizationBucketRequest) (*DeleteOrganizationBucketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganizationBucket not implemented")
}
func (UnimplementedAdminServiceServer) ListBucketConfigurations(context.Context, *ListBucketConfigurationsRequest) (*ListBucketConfigurationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBucketConfigurations not implemented")
}
func (UnimplementedAdminServiceServer) CreateBucketConfiguration(context.Context, *CreateBucketConfigurationRequest) (*CreateBucketConfigurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBucketConfiguration not implemented")
}
func (UnimplementedAdminServiceServer) DeleteBucketConfiguration(context.Context, *DeleteBucketConfigurationRequest) (*DeleteBucketConfigurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBucketConfiguration not implemented")
}
func (UnimplementedAdminServiceServer) ListBucketPrefixMappings(context.Context, *ListBucketPrefixMappingsRequest) (*ListBucketPrefixMappingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBucketPrefixMappings not implemented")
}
func (UnimplementedAdminServiceServer) CreateBucketPrefixMapping(context.Context, *CreateBucketPrefixMappingRequest) (*CreateBucketPrefixMappingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBucketPrefixMapping not implemented")
}
func (UnimplementedAdminServiceServer) DeleteBucketPrefixMapping(context.Context, *DeleteBucketPrefixMappingRequest) (*DeleteBucketPrefixMappingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBucketPrefixMapping not implemented")
}
func (UnimplementedAdminServiceServer) mustEmbedUnimplementedAdminServiceServer() {}
func (UnimplementedAdminServiceServer) testEmbeddedByValue()                      {}

// UnsafeAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminServiceServer will
// result in compilation errors.
type UnsafeAdminServiceServer interface {
	mustEmbedUnimplementedAdminServiceServer()
}

func RegisterAdminServiceServer(s grpc.ServiceRegistrar, srv AdminServiceServer) {
	// If the following call pancis, it indicates UnimplementedAdminServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AdminService_ServiceDesc, srv)
}

func _AdminService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_InQueueStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InQueueStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).InQueueStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_InQueueStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).InQueueStatus(ctx, req.(*InQueueStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListOrganizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListOrganizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ListOrganizations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListOrganizations(ctx, req.(*ListOrganizationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_CreateOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).CreateOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_CreateOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).CreateOrganization(ctx, req.(*CreateOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UpdateOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateOrganization(ctx, req.(*UpdateOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetConsumerLag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConsumerLagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetConsumerLag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetConsumerLag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetConsumerLag(ctx, req.(*GetConsumerLagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListOrganizationAPIKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationAPIKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListOrganizationAPIKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ListOrganizationAPIKeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListOrganizationAPIKeys(ctx, req.(*ListOrganizationAPIKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_CreateOrganizationAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).CreateOrganizationAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_CreateOrganizationAPIKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).CreateOrganizationAPIKey(ctx, req.(*CreateOrganizationAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_DeleteOrganizationAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganizationAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).DeleteOrganizationAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_DeleteOrganizationAPIKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).DeleteOrganizationAPIKey(ctx, req.(*DeleteOrganizationAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListOrganizationBuckets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationBucketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListOrganizationBuckets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ListOrganizationBuckets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListOrganizationBuckets(ctx, req.(*ListOrganizationBucketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_AddOrganizationBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOrganizationBucketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).AddOrganizationBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_AddOrganizationBucket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).AddOrganizationBucket(ctx, req.(*AddOrganizationBucketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_DeleteOrganizationBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganizationBucketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).DeleteOrganizationBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_DeleteOrganizationBucket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).DeleteOrganizationBucket(ctx, req.(*DeleteOrganizationBucketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListBucketConfigurations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBucketConfigurationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListBucketConfigurations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ListBucketConfigurations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListBucketConfigurations(ctx, req.(*ListBucketConfigurationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_CreateBucketConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBucketConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).CreateBucketConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_CreateBucketConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).CreateBucketConfiguration(ctx, req.(*CreateBucketConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_DeleteBucketConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBucketConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).DeleteBucketConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_DeleteBucketConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).DeleteBucketConfiguration(ctx, req.(*DeleteBucketConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListBucketPrefixMappings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBucketPrefixMappingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListBucketPrefixMappings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ListBucketPrefixMappings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListBucketPrefixMappings(ctx, req.(*ListBucketPrefixMappingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_CreateBucketPrefixMapping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBucketPrefixMappingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).CreateBucketPrefixMapping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_CreateBucketPrefixMapping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).CreateBucketPrefixMapping(ctx, req.(*CreateBucketPrefixMappingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_DeleteBucketPrefixMapping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBucketPrefixMappingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).DeleteBucketPrefixMapping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_DeleteBucketPrefixMapping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).DeleteBucketPrefixMapping(ctx, req.(*DeleteBucketPrefixMappingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AdminService_ServiceDesc is the grpc.ServiceDesc for AdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "adminproto.AdminService",
	HandlerType: (*AdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _AdminService_Ping_Handler,
		},
		{
			MethodName: "InQueueStatus",
			Handler:    _AdminService_InQueueStatus_Handler,
		},
		{
			MethodName: "ListOrganizations",
			Handler:    _AdminService_ListOrganizations_Handler,
		},
		{
			MethodName: "CreateOrganization",
			Handler:    _AdminService_CreateOrganization_Handler,
		},
		{
			MethodName: "UpdateOrganization",
			Handler:    _AdminService_UpdateOrganization_Handler,
		},
		{
			MethodName: "GetConsumerLag",
			Handler:    _AdminService_GetConsumerLag_Handler,
		},
		{
			MethodName: "ListOrganizationAPIKeys",
			Handler:    _AdminService_ListOrganizationAPIKeys_Handler,
		},
		{
			MethodName: "CreateOrganizationAPIKey",
			Handler:    _AdminService_CreateOrganizationAPIKey_Handler,
		},
		{
			MethodName: "DeleteOrganizationAPIKey",
			Handler:    _AdminService_DeleteOrganizationAPIKey_Handler,
		},
		{
			MethodName: "ListOrganizationBuckets",
			Handler:    _AdminService_ListOrganizationBuckets_Handler,
		},
		{
			MethodName: "AddOrganizationBucket",
			Handler:    _AdminService_AddOrganizationBucket_Handler,
		},
		{
			MethodName: "DeleteOrganizationBucket",
			Handler:    _AdminService_DeleteOrganizationBucket_Handler,
		},
		{
			MethodName: "ListBucketConfigurations",
			Handler:    _AdminService_ListBucketConfigurations_Handler,
		},
		{
			MethodName: "CreateBucketConfiguration",
			Handler:    _AdminService_CreateBucketConfiguration_Handler,
		},
		{
			MethodName: "DeleteBucketConfiguration",
			Handler:    _AdminService_DeleteBucketConfiguration_Handler,
		},
		{
			MethodName: "ListBucketPrefixMappings",
			Handler:    _AdminService_ListBucketPrefixMappings_Handler,
		},
		{
			MethodName: "CreateBucketPrefixMapping",
			Handler:    _AdminService_CreateBucketPrefixMapping_Handler,
		},
		{
			MethodName: "DeleteBucketPrefixMapping",
			Handler:    _AdminService_DeleteBucketPrefixMapping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "admin.proto",
}
