// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package lrdb

import (
	"context"

	"github.com/google/uuid"
	"time"
)

type Querier interface {
	BatchDeleteMetricSegs(ctx context.Context, arg []BatchDeleteMetricSegsParams) *BatchDeleteMetricSegsBatchResults
	BatchMarkMetricSegsRolledup(ctx context.Context, arg []BatchMarkMetricSegsRolledupParams) *BatchMarkMetricSegsRolledupBatchResults
	// This will upsert a new log exemplar. Attributes, exemplar, and updated_at are always updated
	// to the provided values. If old_fingerprint is not 0, it is added to the list of related
	// fingerprints. This means the "old" fingerprint should be fingerprint, so it always updates
	// an existing record, not changing it to the new one.
	// The return value is a boolean indicating if the record is new.
	BatchUpsertExemplarLogs(ctx context.Context, arg []BatchUpsertExemplarLogsParams) *BatchUpsertExemplarLogsBatchResults
	BatchUpsertExemplarMetrics(ctx context.Context, arg []BatchUpsertExemplarMetricsParams) *BatchUpsertExemplarMetricsBatchResults
	BatchUpsertExemplarTraces(ctx context.Context, arg []BatchUpsertExemplarTracesParams) *BatchUpsertExemplarTracesBatchResults
	CompactLogSegments(ctx context.Context, arg CompactLogSegmentsParams) error
	// Retrieves all pack estimates for a specific signal type
	GetAllBySignal(ctx context.Context, signal string) ([]GetAllBySignalRow, error)
	// Retrieves all existing pack estimates for EWMA calculations across all signals
	GetAllPackEstimates(ctx context.Context) ([]GetAllPackEstimatesRow, error)
	// Get the most recent segment_journal entry
	GetLatestSegmentJournal(ctx context.Context) (SegmentJournal, error)
	GetLogSeg(ctx context.Context, arg GetLogSegParams) (LogSeg, error)
	// Retrieves metric pack estimates for EWMA calculations (backward compatibility)
	GetMetricPackEstimates(ctx context.Context) ([]GetMetricPackEstimatesRow, error)
	GetMetricSeg(ctx context.Context, arg GetMetricSegParams) (MetricSeg, error)
	GetMetricSegsByIds(ctx context.Context, arg GetMetricSegsByIdsParams) ([]MetricSeg, error)
	GetMetricType(ctx context.Context, arg GetMetricTypeParams) (string, error)
	// Get a specific segment_journal entry by ID
	GetSegmentJournalByID(ctx context.Context, id int64) (SegmentJournal, error)
	GetTraceSeg(ctx context.Context, arg GetTraceSegParams) (TraceSeg, error)
	// Insert a debugging journal entry for segment operations
	InsertSegmentJournal(ctx context.Context, arg InsertSegmentJournalParams) error
	// Get the last processed offset for a specific consumer group, topic, partition, organization, and instance
	KafkaGetLastProcessed(ctx context.Context, arg KafkaGetLastProcessedParams) (int64, error)
	// Insert or update multiple Kafka journal entries in a single batch operation
	// Only updates if the new offset is greater than the existing one
	KafkaJournalBatchUpsert(ctx context.Context, arg []KafkaJournalBatchUpsertParams) *KafkaJournalBatchUpsertBatchResults
	// Get the last processed offset for a specific consumer group, topic, and partition
	KafkaJournalGetLastProcessed(ctx context.Context, arg KafkaJournalGetLastProcessedParams) (int64, error)
	// Insert or update the last processed offset for a consumer group, topic, and partition
	// Only updates if the new offset is greater than the existing one
	KafkaJournalUpsert(ctx context.Context, arg KafkaJournalUpsertParams) error
	// Insert or update the last processed offset for a consumer group, topic, partition, organization, and instance
	// Only updates if the new offset is greater than the existing one
	KafkaJournalUpsertWithOrgInstance(ctx context.Context, arg KafkaJournalUpsertWithOrgInstanceParams) error
	ListLogQLTags(ctx context.Context, organizationID uuid.UUID) ([]interface{}, error)
	ListLogSegmentsForQuery(ctx context.Context, arg ListLogSegmentsForQueryParams) ([]ListLogSegmentsForQueryRow, error)
	ListMetricSegmentsForQuery(ctx context.Context, arg ListMetricSegmentsForQueryParams) ([]ListMetricSegmentsForQueryRow, error)
	ListPromMetricTags(ctx context.Context, arg ListPromMetricTagsParams) ([]interface{}, error)
	ListPromMetrics(ctx context.Context, organizationID uuid.UUID) ([]ListPromMetricsRow, error)
	// Returns an estimate of the number of log segments, accounting for per-file overhead.
	LogSegEstimator(ctx context.Context, arg LogSegEstimatorParams) ([]LogSegEstimatorRow, error)
	MarkLogSegsCompactedByKeys(ctx context.Context, arg MarkLogSegsCompactedByKeysParams) error
	MarkMetricSegsCompactedByKeys(ctx context.Context, arg MarkMetricSegsCompactedByKeysParams) error
	MarkMetricSegsRolledupByKeys(ctx context.Context, arg MarkMetricSegsRolledupByKeysParams) error
	MarkTraceSegsCompactedByKeys(ctx context.Context, arg MarkTraceSegsCompactedByKeysParams) error
	// Returns an estimate of the number of metric segments, accounting for per-file overhead.
	// Uses frequency_ms to provide more accurate estimates based on collection frequency.
	MetricSegEstimator(ctx context.Context, arg MetricSegEstimatorParams) ([]MetricSegEstimatorRow, error)
	ObjectCleanupAdd(ctx context.Context, arg ObjectCleanupAddParams) error
	ObjectCleanupBucketSummary(ctx context.Context) ([]ObjectCleanupBucketSummaryRow, error)
	ObjectCleanupComplete(ctx context.Context, id uuid.UUID) error
	ObjectCleanupFail(ctx context.Context, id uuid.UUID) error
	ObjectCleanupGet(ctx context.Context, maxrows int32) ([]ObjectCleanupGetRow, error)
	SignalLockCleanup(ctx context.Context) (int32, error)
	// Returns an estimate of the number of trace segments, accounting for per-file overhead.
	TraceSegEstimator(ctx context.Context, arg TraceSegEstimatorParams) ([]TraceSegEstimatorRow, error)
	// Updates or inserts a single metric pack estimate (backward compatibility)
	UpsertMetricPackEstimate(ctx context.Context, arg UpsertMetricPackEstimateParams) error
	// Updates or inserts a single pack estimate for any signal type
	UpsertPackEstimate(ctx context.Context, arg UpsertPackEstimateParams) error
	UpsertServiceIdentifier(ctx context.Context, arg UpsertServiceIdentifierParams) (UpsertServiceIdentifierRow, error)
	WorkQueueAddDirect(ctx context.Context, arg WorkQueueAddParams) error
	WorkQueueClaimDirect(ctx context.Context, arg WorkQueueClaimParams) (WorkQueueClaimRow, error)
	WorkQueueCleanupDirect(ctx context.Context, lockTtlDead time.Duration) ([]WorkQueueCleanupRow, error)
	WorkQueueCompleteDirect(ctx context.Context, arg WorkQueueCompleteParams) error
	WorkQueueDeleteDirect(ctx context.Context, arg WorkQueueDeleteParams) error
	// First, return unclaimed summaries
	// Then, return claimed details
	WorkQueueExtendedStatus(ctx context.Context) ([]WorkQueueExtendedStatusRow, error)
	WorkQueueFailDirect(ctx context.Context, arg WorkQueueFailParams) error
	WorkQueueGC(ctx context.Context, arg WorkQueueGCParams) (int32, error)
	WorkQueueGlobalLock(ctx context.Context) error
	// 1) heart-beat the work_queue
	WorkQueueHeartbeatDirect(ctx context.Context, arg WorkQueueHeartbeatParams) error
	WorkQueueOrphanedSignalLockCleanup(ctx context.Context, maxrows int32) (int32, error)
	// Get queue depth for work queue scaling by signal and action
	WorkQueueScalingDepth(ctx context.Context, arg WorkQueueScalingDepthParams) (interface{}, error)
	WorkQueueSummary(ctx context.Context) ([]WorkQueueSummaryRow, error)
	batchInsertLogSegsDirect(ctx context.Context, arg []batchInsertLogSegsDirectParams) *batchInsertLogSegsDirectBatchResults
	batchInsertTraceSegsDirect(ctx context.Context, arg []batchInsertTraceSegsDirectParams) *batchInsertTraceSegsDirectBatchResults
	insertLogSegmentDirect(ctx context.Context, arg InsertLogSegmentParams) error
	insertMetricSegDirect(ctx context.Context, arg InsertMetricSegmentParams) error
	insertMetricSegsDirect(ctx context.Context, arg []InsertMetricSegsParams) *insertMetricSegsDirectBatchResults
	insertTraceSegmentDirect(ctx context.Context, arg InsertTraceSegmentParams) error
}

var _ Querier = (*Queries)(nil)
