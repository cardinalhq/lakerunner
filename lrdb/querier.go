// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package lrdb

import (
	"context"
	"time"

	"github.com/google/uuid"
)

type Querier interface {
	BatchDeleteMetricSegs(ctx context.Context, arg []BatchDeleteMetricSegsParams) *BatchDeleteMetricSegsBatchResults
	BatchInsertLogSegs(ctx context.Context, arg []BatchInsertLogSegsParams) *BatchInsertLogSegsBatchResults
	BatchInsertMetricSegs(ctx context.Context, arg []BatchInsertMetricSegsParams) *BatchInsertMetricSegsBatchResults
	BatchInsertTraceSegs(ctx context.Context, arg []BatchInsertTraceSegsParams) *BatchInsertTraceSegsBatchResults
	BatchMarkMetricSegsRolledup(ctx context.Context, arg []BatchMarkMetricSegsRolledupParams) *BatchMarkMetricSegsRolledupBatchResults
	// This will upsert a new log exemplar. Attributes, exemplar, and updated_at are always updated
	// to the provided values. If old_fingerprint is not 0, it is added to the list of related
	// fingerprints. This means the "old" fingerprint should be fingerprint, so it always updates
	// an existing record, not changing it to the new one.
	// The return value is a boolean indicating if the record is new.
	BatchUpsertExemplarLogs(ctx context.Context, arg []BatchUpsertExemplarLogsParams) *BatchUpsertExemplarLogsBatchResults
	BatchUpsertExemplarMetrics(ctx context.Context, arg []BatchUpsertExemplarMetricsParams) *BatchUpsertExemplarMetricsBatchResults
	BatchUpsertExemplarTraces(ctx context.Context, arg []BatchUpsertExemplarTracesParams) *BatchUpsertExemplarTracesBatchResults
	CompactLogSegments(ctx context.Context, arg CompactLogSegmentsParams) error
	CompactTraceSegments(ctx context.Context, arg CompactTraceSegmentsParams) error
	// Clean up old offset entries (older than specified timestamp)
	DeleteOldKafkaOffsets(ctx context.Context, cutoffTime time.Time) error
	// Clean up old seg_log entries for maintenance
	DeleteOldSegLogs(ctx context.Context, cutoffTime time.Time) error
	// Retrieves all existing metric pack estimates for EWMA calculations
	GetAllMetricPackEstimates(ctx context.Context) ([]MetricPackEstimate, error)
	GetExemplarLogsByFingerprint(ctx context.Context, arg GetExemplarLogsByFingerprintParams) (LrdbExemplarLog, error)
	GetExemplarLogsByService(ctx context.Context, arg GetExemplarLogsByServiceParams) ([]LrdbExemplarLog, error)
	GetExemplarLogsCreatedAfter(ctx context.Context, ts time.Time) ([]LrdbExemplarLog, error)
	GetExemplarMetricsByService(ctx context.Context, arg GetExemplarMetricsByServiceParams) ([]LrdbExemplarMetric, error)
	GetExemplarMetricsCreatedAfter(ctx context.Context, ts time.Time) ([]LrdbExemplarMetric, error)
	GetExemplarTracesByFingerprint(ctx context.Context, arg GetExemplarTracesByFingerprintParams) (LrdbExemplarTrace, error)
	GetExemplarTracesByService(ctx context.Context, arg GetExemplarTracesByServiceParams) ([]LrdbExemplarTrace, error)
	GetExemplarTracesCreatedAfter(ctx context.Context, ts time.Time) ([]LrdbExemplarTrace, error)
	// Get all offset entries for a specific consumer group (useful for monitoring)
	GetKafkaOffsetsByConsumerGroup(ctx context.Context, consumerGroup string) ([]GetKafkaOffsetsByConsumerGroupRow, error)
	// Get the most recent seg_log entry
	GetLatestSegLog(ctx context.Context) (SegLog, error)
	GetLogSegmentsForCompaction(ctx context.Context, arg GetLogSegmentsForCompactionParams) ([]GetLogSegmentsForCompactionRow, error)
	// Gets metric pack estimate for specific org with fallback to default (all zeros)
	// Returns up to 2 rows: one for the specific org and one for the default
	GetMetricPackEstimateForOrg(ctx context.Context, arg GetMetricPackEstimateForOrgParams) ([]MetricPackEstimate, error)
	// Get a single segment by its primary key components
	GetMetricSeg(ctx context.Context, arg GetMetricSegParams) (MetricSeg, error)
	// Fetch a single metric segment by its complete primary key
	GetMetricSegByPrimaryKey(ctx context.Context, arg GetMetricSegByPrimaryKeyParams) (MetricSeg, error)
	GetMetricSegsByIds(ctx context.Context, arg GetMetricSegsByIdsParams) ([]MetricSeg, error)
	GetMetricType(ctx context.Context, arg GetMetricTypeParams) (string, error)
	// Get a specific seg_log entry by ID
	GetSegLogByID(ctx context.Context, id int64) (SegLog, error)
	// Get seg_log entries for debugging, filtered by organization
	GetSegLogByOrg(ctx context.Context, arg GetSegLogByOrgParams) ([]SegLog, error)
	GetSpanInfoByFingerprint(ctx context.Context, arg GetSpanInfoByFingerprintParams) (GetSpanInfoByFingerprintRow, error)
	GetTraceSegmentsForCompaction(ctx context.Context, arg GetTraceSegmentsForCompactionParams) ([]GetTraceSegmentsForCompactionRow, error)
	InsertCompactedMetricSeg(ctx context.Context, arg []InsertCompactedMetricSegParams) *InsertCompactedMetricSegBatchResults
	InsertLogSegmentDirect(ctx context.Context, arg InsertLogSegmentParams) error
	InsertMetricSegmentDirect(ctx context.Context, arg InsertMetricSegmentParams) error
	// Insert a debugging log entry for segment operations
	InsertSegLog(ctx context.Context, arg InsertSegLogParams) error
	InsertTraceSegmentDirect(ctx context.Context, arg InsertTraceSegmentDirectParams) error
	// Insert or update multiple Kafka journal entries in a single batch operation
	// Only updates if the new offset is greater than the existing one
	KafkaJournalBatchUpsert(ctx context.Context, arg []KafkaJournalBatchUpsertParams) *KafkaJournalBatchUpsertBatchResults
	// Get the last processed offset for a specific consumer group, topic, and partition
	KafkaJournalGetLastProcessed(ctx context.Context, arg KafkaJournalGetLastProcessedParams) (int64, error)
	// Get the last processed offset for a specific consumer group, topic, partition, organization, and instance
	KafkaJournalGetLastProcessedWithOrgInstance(ctx context.Context, arg KafkaJournalGetLastProcessedWithOrgInstanceParams) (int64, error)
	// Insert or update the last processed offset for a consumer group, topic, and partition
	// Only updates if the new offset is greater than the existing one
	KafkaJournalUpsert(ctx context.Context, arg KafkaJournalUpsertParams) error
	// Insert or update the last processed offset for a consumer group, topic, partition, organization, and instance
	// Only updates if the new offset is greater than the existing one
	KafkaJournalUpsertWithOrgInstance(ctx context.Context, arg KafkaJournalUpsertWithOrgInstanceParams) error
	ListLogQLTags(ctx context.Context, organizationID uuid.UUID) ([]interface{}, error)
	ListLogSegmentsForQuery(ctx context.Context, arg ListLogSegmentsForQueryParams) ([]ListLogSegmentsForQueryRow, error)
	ListMetricSegmentsForQuery(ctx context.Context, arg ListMetricSegmentsForQueryParams) ([]ListMetricSegmentsForQueryRow, error)
	ListPromMetricTags(ctx context.Context, arg ListPromMetricTagsParams) ([]interface{}, error)
	ListPromMetrics(ctx context.Context, organizationID uuid.UUID) ([]ListPromMetricsRow, error)
	// Returns an estimate of the number of log segments, accounting for per-file overhead.
	LogSegEstimator(ctx context.Context, arg LogSegEstimatorParams) ([]LogSegEstimatorRow, error)
	MarkMetricSegsCompactedByKeys(ctx context.Context, arg MarkMetricSegsCompactedByKeysParams) error
	MarkMetricSegsRolledupByKeys(ctx context.Context, arg MarkMetricSegsRolledupByKeysParams) error
	// Returns an estimate of the number of metric segments, accounting for per-file overhead.
	// Uses frequency_ms to provide more accurate estimates based on collection frequency.
	MetricSegEstimator(ctx context.Context, arg MetricSegEstimatorParams) ([]MetricSegEstimatorRow, error)
	ObjectCleanupAdd(ctx context.Context, arg ObjectCleanupAddParams) error
	ObjectCleanupBucketSummary(ctx context.Context) ([]ObjectCleanupBucketSummaryRow, error)
	ObjectCleanupComplete(ctx context.Context, id uuid.UUID) error
	ObjectCleanupFail(ctx context.Context, id uuid.UUID) error
	ObjectCleanupGet(ctx context.Context, maxrows int32) ([]ObjectCleanupGetRow, error)
	SetMetricSegCompacted(ctx context.Context, arg SetMetricSegCompactedParams) error
	SetSingleMetricSegCompacted(ctx context.Context, arg SetSingleMetricSegCompactedParams) error
	SignalLockCleanup(ctx context.Context) (int32, error)
	// Returns an estimate of the number of trace segments, accounting for per-file overhead.
	TraceSegEstimator(ctx context.Context, arg TraceSegEstimatorParams) ([]TraceSegEstimatorRow, error)
	// Updates or inserts a single metric pack estimate
	UpsertMetricPackEstimate(ctx context.Context, arg UpsertMetricPackEstimateParams) error
	UpsertServiceIdentifier(ctx context.Context, arg UpsertServiceIdentifierParams) (UpsertServiceIdentifierRow, error)
	WorkQueueAddDirect(ctx context.Context, arg WorkQueueAddParams) error
	WorkQueueClaimDirect(ctx context.Context, arg WorkQueueClaimParams) (WorkQueueClaimRow, error)
	WorkQueueCleanupDirect(ctx context.Context, lockTtlDead time.Duration) ([]WorkQueueCleanupRow, error)
	WorkQueueCompleteDirect(ctx context.Context, arg WorkQueueCompleteParams) error
	WorkQueueDeleteDirect(ctx context.Context, arg WorkQueueDeleteParams) error
	// First, return unclaimed summaries
	// Then, return claimed details
	WorkQueueExtendedStatus(ctx context.Context) ([]WorkQueueExtendedStatusRow, error)
	WorkQueueFailDirect(ctx context.Context, arg WorkQueueFailParams) error
	WorkQueueGC(ctx context.Context, arg WorkQueueGCParams) (int32, error)
	WorkQueueGlobalLock(ctx context.Context) error
	// 1) heart-beat the work_queue
	WorkQueueHeartbeatDirect(ctx context.Context, arg WorkQueueHeartbeatParams) error
	WorkQueueOrphanedSignalLockCleanup(ctx context.Context, maxrows int32) (int32, error)
	// Get queue depth for work queue scaling by signal and action
	WorkQueueScalingDepth(ctx context.Context, arg WorkQueueScalingDepthParams) (interface{}, error)
	WorkQueueSummary(ctx context.Context) ([]WorkQueueSummaryRow, error)
}

var _ Querier = (*Queries)(nil)
