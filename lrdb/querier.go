// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package lrdb

import (
	"context"
	"time"

	"github.com/google/uuid"
)

type Querier interface {
	BatchDeleteMetricSegs(ctx context.Context, arg []BatchDeleteMetricSegsParams) *BatchDeleteMetricSegsBatchResults
	BatchInsertMetricSegs(ctx context.Context, arg []BatchInsertMetricSegsParams) *BatchInsertMetricSegsBatchResults
	BatchMarkMetricSegsRolledup(ctx context.Context, arg []BatchMarkMetricSegsRolledupParams) *BatchMarkMetricSegsRolledupBatchResults
	// This will upsert a new log exemplar. Attributes, exemplar, and updated_at are always updated
	// to the provided values. If old_fingerprint is not 0, it is added to the list of related
	// fingerprints. This means the "old" fingerprint should be fingerprint, so it always updates
	// an existing record, not changing it to the new one.
	// The return value is a boolean indicating if the record is new.
	BatchUpsertExemplarLogs(ctx context.Context, arg []BatchUpsertExemplarLogsParams) *BatchUpsertExemplarLogsBatchResults
	BatchUpsertExemplarMetrics(ctx context.Context, arg []BatchUpsertExemplarMetricsParams) *BatchUpsertExemplarMetricsBatchResults
	BatchUpsertExemplarTraces(ctx context.Context, arg []BatchUpsertExemplarTracesParams) *BatchUpsertExemplarTracesBatchResults
	// 1) Safety net: if any single file already meets/exceeds the cap, take that file alone
	// 2) One seed (oldest/highest-priority) per group (org, instance) within signal
	// 3) Order groups globally by their seed (priority DESC, queue_ts ASC)
	// 4) Attach age flags + caps per group (using params only; no per-row estimator here)
	// 5) All ready rows in each group for that signal (selection only; claim happens later)
	// 6) Greedy pack within each group, ordered by priority/queue_ts
	// 7) Keep only rows that fit under caps
	// 8) Totals per group (what weâ€™d actually claim)
	// 9) Eligibility: any group with positive size (greedy batching)
	// 10) Pick earliest eligible group globally
	// 11) Rows to claim for the winner group
	// 12) Final chosen IDs: prefer big_single if present; else packed group rows
	// 13) Atomic optimistic claim (no window funcs here)
	ClaimInqueueWorkBatch(ctx context.Context, arg ClaimInqueueWorkBatchParams) ([]ClaimInqueueWorkBatchRow, error)
	CleanupInqueueWork(ctx context.Context, cutoffTime *time.Time) ([]Inqueue, error)
	CompactLogSegments(ctx context.Context, arg CompactLogSegmentsParams) error
	CompactTraceSegments(ctx context.Context, arg CompactTraceSegmentsParams) error
	DeleteInqueueWork(ctx context.Context, arg DeleteInqueueWorkParams) error
	// Retrieves all existing metric pack estimates for EWMA calculations
	GetAllMetricPackEstimates(ctx context.Context) ([]MetricPackEstimate, error)
	GetExemplarLogsByFingerprint(ctx context.Context, arg GetExemplarLogsByFingerprintParams) (ExemplarLog, error)
	GetExemplarLogsByService(ctx context.Context, arg GetExemplarLogsByServiceParams) ([]ExemplarLog, error)
	GetExemplarLogsCreatedAfter(ctx context.Context, ts time.Time) ([]ExemplarLog, error)
	GetExemplarMetricsByService(ctx context.Context, arg GetExemplarMetricsByServiceParams) ([]ExemplarMetric, error)
	GetExemplarMetricsCreatedAfter(ctx context.Context, ts time.Time) ([]ExemplarMetric, error)
	GetExemplarTracesByFingerprint(ctx context.Context, arg GetExemplarTracesByFingerprintParams) (ExemplarTrace, error)
	GetExemplarTracesByService(ctx context.Context, arg GetExemplarTracesByServiceParams) ([]ExemplarTrace, error)
	GetExemplarTracesCreatedAfter(ctx context.Context, ts time.Time) ([]ExemplarTrace, error)
	GetLogSegmentsForCompaction(ctx context.Context, arg GetLogSegmentsForCompactionParams) ([]GetLogSegmentsForCompactionRow, error)
	GetMetricSegsByIds(ctx context.Context, arg GetMetricSegsByIdsParams) ([]MetricSeg, error)
	GetMetricType(ctx context.Context, arg GetMetricTypeParams) (string, error)
	GetSpanInfoByFingerprint(ctx context.Context, arg GetSpanInfoByFingerprintParams) (GetSpanInfoByFingerprintRow, error)
	GetTraceSegmentsForCompaction(ctx context.Context, arg GetTraceSegmentsForCompactionParams) ([]GetTraceSegmentsForCompactionRow, error)
	InqueueJournalDelete(ctx context.Context, arg InqueueJournalDeleteParams) error
	InqueueJournalUpsert(ctx context.Context, arg InqueueJournalUpsertParams) (bool, error)
	// Get queue depth for ingest scaling by signal
	InqueueScalingDepth(ctx context.Context, signal string) (interface{}, error)
	InqueueSummary(ctx context.Context) ([]InqueueSummaryRow, error)
	InsertCompactedMetricSeg(ctx context.Context, arg []InsertCompactedMetricSegParams) *InsertCompactedMetricSegBatchResults
	InsertLogSegmentDirect(ctx context.Context, arg InsertLogSegmentParams) error
	InsertMetricSegmentDirect(ctx context.Context, arg InsertMetricSegmentParams) error
	InsertTraceSegmentDirect(ctx context.Context, arg InsertTraceSegmentDirectParams) error
	ListLogSegmentsForQuery(ctx context.Context, arg ListLogSegmentsForQueryParams) ([]ListLogSegmentsForQueryRow, error)
	ListMetricSegmentsForQuery(ctx context.Context, arg ListMetricSegmentsForQueryParams) ([]ListMetricSegmentsForQueryRow, error)
	ListPromMetricTags(ctx context.Context, arg ListPromMetricTagsParams) ([]string, error)
	ListPromMetrics(ctx context.Context, organizationID uuid.UUID) ([]ListPromMetricsRow, error)
	// Returns an estimate of the number of log segments, accounting for per-file overhead.
	LogSegEstimator(ctx context.Context, arg LogSegEstimatorParams) ([]LogSegEstimatorRow, error)
	MarkMetricSegsCompactedByKeys(ctx context.Context, arg MarkMetricSegsCompactedByKeysParams) error
	MarkMetricSegsRolledupByKeys(ctx context.Context, arg MarkMetricSegsRolledupByKeysParams) error
	McqClaimBundle(ctx context.Context, arg McqClaimBundleParams) error
	McqCleanupExpired(ctx context.Context, cutoffTime *time.Time) ([]MetricCompactionQueue, error)
	McqCompleteDelete(ctx context.Context, arg McqCompleteDeleteParams) error
	McqDeferItems(ctx context.Context, arg McqDeferItemsParams) error
	McqFetchCandidates(ctx context.Context, arg McqFetchCandidatesParams) ([]McqFetchCandidatesRow, error)
	McqHeartbeat(ctx context.Context, arg McqHeartbeatParams) (int64, error)
	McqPickHead(ctx context.Context) (McqPickHeadRow, error)
	McqQueueWork(ctx context.Context, arg McqQueueWorkParams) error
	McqReclaimTimeouts(ctx context.Context, arg McqReclaimTimeoutsParams) (int64, error)
	McqRelease(ctx context.Context, arg McqReleaseParams) error
	// Get queue depth for metric compaction scaling
	MetricCompactionQueueScalingDepth(ctx context.Context) (interface{}, error)
	// Get queue depth for metric rollup scaling
	MetricRollupQueueScalingDepth(ctx context.Context) (interface{}, error)
	// Returns an estimate of the number of metric segments, accounting for per-file overhead.
	// Uses frequency_ms to provide more accurate estimates based on collection frequency.
	MetricSegEstimator(ctx context.Context, arg MetricSegEstimatorParams) ([]MetricSegEstimatorRow, error)
	MrqClaimBundle(ctx context.Context, arg MrqClaimBundleParams) error
	MrqClaimSingleRow(ctx context.Context, arg MrqClaimSingleRowParams) (MrqClaimSingleRowRow, error)
	MrqCompleteDelete(ctx context.Context, arg MrqCompleteDeleteParams) error
	MrqDeferItems(ctx context.Context, arg MrqDeferItemsParams) error
	MrqFetchCandidates(ctx context.Context, arg MrqFetchCandidatesParams) ([]MrqFetchCandidatesRow, error)
	MrqHeartbeat(ctx context.Context, arg MrqHeartbeatParams) (int64, error)
	MrqPickHead(ctx context.Context) (MrqPickHeadRow, error)
	MrqQueueWork(ctx context.Context, arg MrqQueueWorkParams) error
	MrqReclaimTimeouts(ctx context.Context, arg MrqReclaimTimeoutsParams) (int64, error)
	MrqRelease(ctx context.Context, arg MrqReleaseParams) error
	ObjectCleanupAdd(ctx context.Context, arg ObjectCleanupAddParams) error
	ObjectCleanupBucketSummary(ctx context.Context) ([]ObjectCleanupBucketSummaryRow, error)
	ObjectCleanupComplete(ctx context.Context, id uuid.UUID) error
	ObjectCleanupFail(ctx context.Context, id uuid.UUID) error
	ObjectCleanupGet(ctx context.Context, maxrows int32) ([]ObjectCleanupGetRow, error)
	PutInqueueWork(ctx context.Context, arg PutInqueueWorkParams) error
	ReleaseInqueueWork(ctx context.Context, arg ReleaseInqueueWorkParams) error
	SetMetricSegCompacted(ctx context.Context, arg SetMetricSegCompactedParams) error
	SignalLockCleanup(ctx context.Context) (int32, error)
	TouchInqueueWork(ctx context.Context, arg TouchInqueueWorkParams) error
	// Returns an estimate of the number of trace segments, accounting for per-file overhead.
	TraceSegEstimator(ctx context.Context, arg TraceSegEstimatorParams) ([]TraceSegEstimatorRow, error)
	// Updates or inserts a single metric pack estimate
	UpsertMetricPackEstimate(ctx context.Context, arg UpsertMetricPackEstimateParams) error
	UpsertServiceIdentifier(ctx context.Context, arg UpsertServiceIdentifierParams) (UpsertServiceIdentifierRow, error)
	WorkQueueAddDirect(ctx context.Context, arg WorkQueueAddParams) error
	WorkQueueClaimDirect(ctx context.Context, arg WorkQueueClaimParams) (WorkQueueClaimRow, error)
	WorkQueueCleanupDirect(ctx context.Context, lockTtlDead time.Duration) ([]WorkQueueCleanupRow, error)
	WorkQueueCompleteDirect(ctx context.Context, arg WorkQueueCompleteParams) error
	WorkQueueDeleteDirect(ctx context.Context, arg WorkQueueDeleteParams) error
	// First, return unclaimed summaries
	// Then, return claimed details
	WorkQueueExtendedStatus(ctx context.Context) ([]WorkQueueExtendedStatusRow, error)
	WorkQueueFailDirect(ctx context.Context, arg WorkQueueFailParams) error
	WorkQueueGC(ctx context.Context, arg WorkQueueGCParams) (int32, error)
	WorkQueueGlobalLock(ctx context.Context) error
	// 1) heart-beat the work_queue
	WorkQueueHeartbeatDirect(ctx context.Context, arg WorkQueueHeartbeatParams) error
	WorkQueueOrphanedSignalLockCleanup(ctx context.Context, maxrows int32) (int32, error)
	// Get queue depth for work queue scaling by signal and action
	WorkQueueScalingDepth(ctx context.Context, arg WorkQueueScalingDepthParams) (interface{}, error)
	WorkQueueSummary(ctx context.Context) ([]WorkQueueSummaryRow, error)
}

var _ Querier = (*Queries)(nil)
