// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package lrdb

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type Querier interface {
	BatchDeleteMetricSegs(ctx context.Context, arg []BatchDeleteMetricSegsParams) *BatchDeleteMetricSegsBatchResults
	BatchInsertMetricSegs(ctx context.Context, arg []BatchInsertMetricSegsParams) *BatchInsertMetricSegsBatchResults
	BatchMarkMetricSegsRolledup(ctx context.Context, arg []BatchMarkMetricSegsRolledupParams) *BatchMarkMetricSegsRolledupBatchResults
	// This will upsert a new log exemplar. Attributes, exemplar, and updated_at are always updated
	// to the provided values. If old_fingerprint is not 0, it is added to the list of related
	// fingerprints. This means the "old" fingerprint should be fingerprint, so it always updates
	// an existing record, not changing it to the new one.
	// The return value is a boolean indicating if the record is new.
	BatchUpsertExemplarLogs(ctx context.Context, arg []BatchUpsertExemplarLogsParams) *BatchUpsertExemplarLogsBatchResults
	BatchUpsertExemplarMetrics(ctx context.Context, arg []BatchUpsertExemplarMetricsParams) *BatchUpsertExemplarMetricsBatchResults
	BatchUpsertExemplarTraces(ctx context.Context, arg []BatchUpsertExemplarTracesParams) *BatchUpsertExemplarTracesBatchResults
	ClaimInqueueWork(ctx context.Context, arg ClaimInqueueWorkParams) (Inqueue, error)
	// Greedy pack up to size cap and row cap
	ClaimInqueueWorkBatch(ctx context.Context, arg ClaimInqueueWorkBatchParams) ([]ClaimInqueueWorkBatchRow, error)
	// Safety net: claim a single big row immediately if any row >= target_records
	// Ready rows excluding nothing (the big_single branch is short-circuited later)
	// One seed per (org, instance, dateint): oldest/highest-priority in the group
	// Order groups globally by seed's (priority DESC, queue_ts ASC)
	// Evaluate groups in global order; compute per-group “pack” and eligibility
	// We use LATERAL so Postgres can walk groups one-by-one and stop at the first match.
	// The rows to claim when using the group path (exact packed rows for the winner)
	// Final choice: prefer big_single if any; otherwise the packed group
	ClaimMetricCompactionWork(ctx context.Context, arg ClaimMetricCompactionWorkParams) ([]ClaimMetricCompactionWorkRow, error)
	CleanupInqueueWork(ctx context.Context, cutoffTime *time.Time) ([]Inqueue, error)
	CompactLogSegments(ctx context.Context, arg CompactLogSegmentsParams) error
	CompactTraceSegments(ctx context.Context, arg CompactTraceSegmentsParams) error
	DeleteInqueueWork(ctx context.Context, arg DeleteInqueueWorkParams) error
	GetExemplarLogsByFingerprint(ctx context.Context, arg GetExemplarLogsByFingerprintParams) (ExemplarLog, error)
	GetExemplarLogsByService(ctx context.Context, arg GetExemplarLogsByServiceParams) ([]ExemplarLog, error)
	GetExemplarLogsCreatedAfter(ctx context.Context, ts time.Time) ([]ExemplarLog, error)
	GetExemplarMetricsByService(ctx context.Context, arg GetExemplarMetricsByServiceParams) ([]ExemplarMetric, error)
	GetExemplarMetricsCreatedAfter(ctx context.Context, ts time.Time) ([]ExemplarMetric, error)
	GetExemplarTracesByFingerprint(ctx context.Context, arg GetExemplarTracesByFingerprintParams) (ExemplarTrace, error)
	GetExemplarTracesByService(ctx context.Context, arg GetExemplarTracesByServiceParams) ([]ExemplarTrace, error)
	GetExemplarTracesCreatedAfter(ctx context.Context, ts time.Time) ([]ExemplarTrace, error)
	GetLogSegmentsForCompaction(ctx context.Context, arg GetLogSegmentsForCompactionParams) ([]GetLogSegmentsForCompactionRow, error)
	GetMetricSegsForCompaction(ctx context.Context, arg GetMetricSegsForCompactionParams) ([]MetricSeg, error)
	GetMetricSegsForRollup(ctx context.Context, arg GetMetricSegsForRollupParams) ([]MetricSeg, error)
	GetSpanInfoByFingerprint(ctx context.Context, arg GetSpanInfoByFingerprintParams) (GetSpanInfoByFingerprintRow, error)
	GetTraceSegmentsForCompaction(ctx context.Context, arg GetTraceSegmentsForCompactionParams) ([]GetTraceSegmentsForCompactionRow, error)
	InqueueJournalDelete(ctx context.Context, arg InqueueJournalDeleteParams) error
	InqueueJournalUpsert(ctx context.Context, arg InqueueJournalUpsertParams) (bool, error)
	InqueueSummary(ctx context.Context) ([]InqueueSummaryRow, error)
	InsertLogSegmentDirect(ctx context.Context, arg InsertLogSegmentParams) error
	InsertMetricSegmentDirect(ctx context.Context, arg InsertMetricSegmentParams) error
	InsertTraceSegmentDirect(ctx context.Context, arg InsertTraceSegmentDirectParams) error
	ListSegmentsForQuery(ctx context.Context, arg ListSegmentsForQueryParams) ([]ListSegmentsForQueryRow, error)
	// Returns an estimate of the number of log segments, average bytes, average records,
	// and average bytes per record for log segments in the last hour per organization and instance.
	// This query is basically identical to the MetricSegEstimator, but for log segments.
	LogSegEstimator(ctx context.Context, arg LogSegEstimatorParams) ([]LogSegEstimatorRow, error)
	// Returns an estimate of the number of metric segments, average bytes, average records,
	// and average bytes per record for metric segments in the last hour per organization, instance, and frequency.
	// Uses frequency_ms to provide more accurate estimates based on collection frequency.
	MetricSegEstimator(ctx context.Context, arg MetricSegEstimatorParams) ([]MetricSegEstimatorRow, error)
	ObjectCleanupAdd(ctx context.Context, arg ObjectCleanupAddParams) error
	ObjectCleanupBucketSummary(ctx context.Context) ([]ObjectCleanupBucketSummaryRow, error)
	ObjectCleanupComplete(ctx context.Context, id uuid.UUID) error
	ObjectCleanupFail(ctx context.Context, id uuid.UUID) error
	ObjectCleanupGet(ctx context.Context, maxrows int32) ([]ObjectCleanupGetRow, error)
	PutInqueueWork(ctx context.Context, arg PutInqueueWorkParams) error
	PutMetricCompactionWork(ctx context.Context, arg PutMetricCompactionWorkParams) error
	ReleaseInqueueWork(ctx context.Context, arg ReleaseInqueueWorkParams) error
	ReleaseMetricCompactionWork(ctx context.Context, arg ReleaseMetricCompactionWorkParams) error
	SignalLockCleanup(ctx context.Context) (int32, error)
	TouchInqueueWork(ctx context.Context, arg TouchInqueueWorkParams) error
	// Returns an estimate of the number of trace segments, average bytes, average records,
	// and average bytes per record for trace segments in the last hour per organization and instance.
	// This query is basically identical to the LogSegEstimator, but for trace segments.
	TraceSegEstimator(ctx context.Context, arg TraceSegEstimatorParams) ([]TraceSegEstimatorRow, error)
	UpsertServiceIdentifier(ctx context.Context, arg UpsertServiceIdentifierParams) (UpsertServiceIdentifierRow, error)
	WorkQueueAddDirect(ctx context.Context, arg WorkQueueAddParams) error
	WorkQueueClaimDirect(ctx context.Context, arg WorkQueueClaimParams) (WorkQueueClaimRow, error)
	WorkQueueCleanupDirect(ctx context.Context, lockTtlDead pgtype.Interval) ([]WorkQueueCleanupRow, error)
	WorkQueueCompleteDirect(ctx context.Context, arg WorkQueueCompleteParams) error
	WorkQueueDeleteDirect(ctx context.Context, arg WorkQueueDeleteParams) error
	// First, return unclaimed summaries
	// Then, return claimed details
	WorkQueueExtendedStatus(ctx context.Context) ([]WorkQueueExtendedStatusRow, error)
	WorkQueueFailDirect(ctx context.Context, arg WorkQueueFailParams) error
	WorkQueueGC(ctx context.Context, arg WorkQueueGCParams) (int32, error)
	WorkQueueGlobalLock(ctx context.Context) error
	// 1) heart-beat the work_queue
	WorkQueueHeartbeatDirect(ctx context.Context, arg WorkQueueHeartbeatParams) error
	WorkQueueOrphanedSignalLockCleanup(ctx context.Context, maxrows int32) (int32, error)
	WorkQueueSummary(ctx context.Context) ([]WorkQueueSummaryRow, error)
}

var _ Querier = (*Queries)(nil)
