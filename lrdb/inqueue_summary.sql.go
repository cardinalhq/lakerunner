// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: inqueue_summary.sql

package lrdb

import (
	"context"
)

const inqueueSummary = `-- name: InqueueSummary :many
SELECT count(*) AS count, signal
FROM inqueue
WHERE claimed_at IS NULL
GROUP BY signal
ORDER BY signal
`

type InqueueSummaryRow struct {
	Count  int64  `json:"count"`
	Signal string `json:"signal"`
}

func (q *Queries) InqueueSummary(ctx context.Context) ([]InqueueSummaryRow, error) {
	rows, err := q.db.Query(ctx, inqueueSummary)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []InqueueSummaryRow
	for rows.Next() {
		var i InqueueSummaryRow
		if err := rows.Scan(&i.Count, &i.Signal); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
