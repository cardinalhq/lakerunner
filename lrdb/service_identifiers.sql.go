// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: service_identifiers.sql

package lrdb

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const upsertServiceIdentifier = `-- name: UpsertServiceIdentifier :one
INSERT INTO service_identifiers
  (organization_id, service_name, cluster_name, namespace)
  VALUES ($1, $2, $3, $4)
  ON CONFLICT (organization_id, service_name, cluster_name, namespace)
  DO UPDATE SET updated_at = now()
  RETURNING id, created_at
`

type UpsertServiceIdentifierParams struct {
	OrganizationID uuid.UUID `json:"organization_id"`
	ServiceName    string    `json:"service_name"`
	ClusterName    string    `json:"cluster_name"`
	Namespace      string    `json:"namespace"`
}

type UpsertServiceIdentifierRow struct {
	ID        uuid.UUID `json:"id"`
	CreatedAt time.Time `json:"created_at"`
}

func (q *Queries) UpsertServiceIdentifier(ctx context.Context, arg UpsertServiceIdentifierParams) (UpsertServiceIdentifierRow, error) {
	row := q.db.QueryRow(ctx, upsertServiceIdentifier,
		arg.OrganizationID,
		arg.ServiceName,
		arg.ClusterName,
		arg.Namespace,
	)
	var i UpsertServiceIdentifierRow
	err := row.Scan(&i.ID, &i.CreatedAt)
	return i, err
}
