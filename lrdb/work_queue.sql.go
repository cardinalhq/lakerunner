// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: work_queue.sql

package lrdb

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const workQueueAddDirect = `-- name: WorkQueueAddDirect :exec
SELECT public.work_queue_add(
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9,
    $10
)
`

type WorkQueueAddParams struct {
	OrgID      uuid.UUID                        `json:"org_id"`
	Instance   int16                            `json:"instance"`
	Dateint    int32                            `json:"dateint"`
	Frequency  int32                            `json:"frequency"`
	Signal     SignalEnum                       `json:"signal"`
	Action     ActionEnum                       `json:"action"`
	TsRange    pgtype.Range[pgtype.Timestamptz] `json:"ts_range"`
	RunnableAt time.Time                        `json:"runnable_at"`
	Priority   int32                            `json:"priority"`
	SlotID     int32                            `json:"slot_id"`
}

func (q *Queries) WorkQueueAddDirect(ctx context.Context, arg WorkQueueAddParams) error {
	_, err := q.db.Exec(ctx, workQueueAddDirect,
		arg.OrgID,
		arg.Instance,
		arg.Dateint,
		arg.Frequency,
		arg.Signal,
		arg.Action,
		arg.TsRange,
		arg.RunnableAt,
		arg.Priority,
		arg.SlotID,
	)
	return err
}

const workQueueClaimDirect = `-- name: WorkQueueClaimDirect :one
WITH
  v_now AS (
    SELECT NOW() AS ts
  ),

  target_freqs AS (
    SELECT unnest($1::INTEGER[]) AS freq
  ),

  -- Only used for rollup actions (compact doesn't expand)
  rollup_sources(parent_freq_ms, child_freq_ms) AS (
    VALUES
      (60000,    10000),
      (300000,   60000),
      (1200000,  300000),
      (3600000, 1200000)
  ),

  sl_small AS MATERIALIZED (
    SELECT id, work_id, organization_id, instance_num, dateint, frequency_ms, signal, ts_range, claimed_by, claimed_at, heartbeated_at, slot_id
    FROM public.signal_locks sl
    WHERE
      sl.signal = $2
      AND sl.frequency_ms = ANY (
        ARRAY(SELECT freq FROM target_freqs)
        || COALESCE(
             (SELECT array_agg(child_freq_ms)
              FROM rollup_sources
              WHERE parent_freq_ms = ANY(SELECT freq FROM target_freqs)
                AND $3::action_enum = 'rollup'),
             '{}'
           )
      )
  ),

  -- Find a candidate work item that:
  -- - matches the requested signal, action, and target frequencies
  -- - has priority >= min_priority
  -- - is runnable now
  -- - is not blocked by an existing lock on the same lock key
  -- - needs to run
  candidate AS (
    SELECT w.id, w.priority, w.runnable_at, w.organization_id, w.instance_num, w.dateint, w.frequency_ms, w.signal, w.action, w.needs_run, w.tries, w.ts_range, w.claimed_by, w.claimed_at, w.heartbeated_at, w.slot_id
    FROM public.work_queue w
    LEFT JOIN sl_small sl
      ON sl.organization_id = w.organization_id
     AND sl.signal          = w.signal
     AND sl.slot_id         = w.slot_id
     AND sl.ts_range        && w.ts_range
     AND sl.work_id         <> w.id
    WHERE
      w.frequency_ms = ANY (SELECT freq FROM target_freqs)
      AND w.priority       >= $4
      AND w.signal         = $2
      AND w.action         = $3
      AND w.runnable_at   <= (SELECT ts FROM v_now)
      AND sl.id IS NULL
      AND w.needs_run
    ORDER BY
      w.needs_run DESC,
      w.priority  DESC,
      w.runnable_at,
      w.id
    LIMIT 1
    FOR UPDATE SKIP LOCKED
  ),

  -- Lock the candidate's own frequency, and (for rollup) its child frequency too.
  lock_map AS (
    SELECT c.frequency_ms AS lock_freq_ms
    FROM candidate c

    UNION ALL

    SELECT rs.child_freq_ms AS lock_freq_ms
    FROM candidate c
    JOIN rollup_sources rs
      ON c.frequency_ms = rs.parent_freq_ms
    WHERE $3 = 'rollup'
  ),

  -- Clear any stale locks tied to this work_id (idempotence).
  cleanup_locks AS (
    DELETE FROM public.signal_locks sl
    USING candidate c
    WHERE sl.work_id = c.id
  ),

  -- Insert fresh locks bound to the candidate's slot.
  new_locks AS (
    INSERT INTO public.signal_locks (
      organization_id, instance_num, dateint,
      frequency_ms,    signal,       claimed_by,
      claimed_at,      ts_range,     work_id,
      slot_id
    )
    SELECT
      c.organization_id,
      c.instance_num,
      c.dateint,
      lm.lock_freq_ms,
      c.signal,
      $5,
      (SELECT ts FROM v_now),
      c.ts_range,
      c.id,
      c.slot_id
    FROM candidate c
    CROSS JOIN lock_map lm
    ORDER BY lm.lock_freq_ms
  ),

  -- Claim the work item.
  updated AS (
    UPDATE public.work_queue w
    SET
      claimed_by     = $5,
      claimed_at     = (SELECT ts FROM v_now),
      heartbeated_at = (SELECT ts FROM v_now),
      needs_run      = FALSE,
      tries          = w.tries + 1
    FROM candidate c
    WHERE w.id = c.id
    RETURNING w.id, w.priority, w.runnable_at, w.organization_id, w.instance_num, w.dateint, w.frequency_ms, w.signal, w.action, w.needs_run, w.tries, w.ts_range, w.claimed_by, w.claimed_at, w.heartbeated_at, w.slot_id
  )

SELECT id, priority, runnable_at, organization_id, instance_num, dateint, frequency_ms, signal, action, needs_run, tries, ts_range, claimed_by, claimed_at, heartbeated_at, slot_id FROM updated
`

type WorkQueueClaimParams struct {
	TargetFreqs []int32    `json:"target_freqs"`
	Signal      SignalEnum `json:"signal"`
	Action      ActionEnum `json:"action"`
	MinPriority int32      `json:"min_priority"`
	WorkerID    int64      `json:"worker_id"`
}

type WorkQueueClaimRow struct {
	ID             int64                            `json:"id"`
	Priority       int32                            `json:"priority"`
	RunnableAt     time.Time                        `json:"runnable_at"`
	OrganizationID uuid.UUID                        `json:"organization_id"`
	InstanceNum    int16                            `json:"instance_num"`
	Dateint        int32                            `json:"dateint"`
	FrequencyMs    int32                            `json:"frequency_ms"`
	Signal         SignalEnum                       `json:"signal"`
	Action         ActionEnum                       `json:"action"`
	NeedsRun       bool                             `json:"needs_run"`
	Tries          int32                            `json:"tries"`
	TsRange        pgtype.Range[pgtype.Timestamptz] `json:"ts_range"`
	ClaimedBy      int64                            `json:"claimed_by"`
	ClaimedAt      *time.Time                       `json:"claimed_at"`
	HeartbeatedAt  time.Time                        `json:"heartbeated_at"`
	SlotID         int32                            `json:"slot_id"`
}

func (q *Queries) WorkQueueClaimDirect(ctx context.Context, arg WorkQueueClaimParams) (WorkQueueClaimRow, error) {
	row := q.db.QueryRow(ctx, workQueueClaimDirect,
		arg.TargetFreqs,
		arg.Signal,
		arg.Action,
		arg.MinPriority,
		arg.WorkerID,
	)
	var i WorkQueueClaimRow
	err := row.Scan(
		&i.ID,
		&i.Priority,
		&i.RunnableAt,
		&i.OrganizationID,
		&i.InstanceNum,
		&i.Dateint,
		&i.FrequencyMs,
		&i.Signal,
		&i.Action,
		&i.NeedsRun,
		&i.Tries,
		&i.TsRange,
		&i.ClaimedBy,
		&i.ClaimedAt,
		&i.HeartbeatedAt,
		&i.SlotID,
	)
	return i, err
}

const workQueueCleanupDirect = `-- name: WorkQueueCleanupDirect :many
WITH params AS (
  SELECT
    NOW() AS v_now,
    $1::INTERVAL AS dead_ttl
),
expired AS (
  UPDATE public.work_queue w
  SET
    claimed_by     = -1,
    claimed_at     = NULL,
    heartbeated_at = params.v_now,
    needs_run      = TRUE,
    tries          = 0
  FROM params
  WHERE
    w.claimed_by <> -1
    AND w.heartbeated_at < params.v_now - params.dead_ttl
  RETURNING w.id, w.priority, w.runnable_at, w.organization_id, w.instance_num, w.dateint, w.frequency_ms, w.signal, w.action, w.needs_run, w.tries, w.ts_range, w.claimed_by, w.claimed_at, w.heartbeated_at, w.slot_id
),
deleted_locks AS (
  DELETE FROM public.signal_locks sl
  USING expired e
  WHERE sl.work_id = e.id
  RETURNING sl.id
)
SELECT
  e.id, e.priority, e.runnable_at, e.organization_id, e.instance_num, e.dateint, e.frequency_ms, e.signal, e.action, e.needs_run, e.tries, e.ts_range, e.claimed_by, e.claimed_at, e.heartbeated_at, e.slot_id,
  (SELECT COUNT(*) FROM deleted_locks) AS locks_removed
FROM expired e
`

type WorkQueueCleanupRow struct {
	ID             int64                            `json:"id"`
	Priority       int32                            `json:"priority"`
	RunnableAt     time.Time                        `json:"runnable_at"`
	OrganizationID uuid.UUID                        `json:"organization_id"`
	InstanceNum    int16                            `json:"instance_num"`
	Dateint        int32                            `json:"dateint"`
	FrequencyMs    int32                            `json:"frequency_ms"`
	Signal         SignalEnum                       `json:"signal"`
	Action         ActionEnum                       `json:"action"`
	NeedsRun       bool                             `json:"needs_run"`
	Tries          int32                            `json:"tries"`
	TsRange        pgtype.Range[pgtype.Timestamptz] `json:"ts_range"`
	ClaimedBy      int64                            `json:"claimed_by"`
	ClaimedAt      *time.Time                       `json:"claimed_at"`
	HeartbeatedAt  time.Time                        `json:"heartbeated_at"`
	SlotID         int32                            `json:"slot_id"`
	LocksRemoved   int64                            `json:"locks_removed"`
}

func (q *Queries) WorkQueueCleanupDirect(ctx context.Context, lockTtlDead time.Duration) ([]WorkQueueCleanupRow, error) {
	rows, err := q.db.Query(ctx, workQueueCleanupDirect, lockTtlDead)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []WorkQueueCleanupRow
	for rows.Next() {
		var i WorkQueueCleanupRow
		if err := rows.Scan(
			&i.ID,
			&i.Priority,
			&i.RunnableAt,
			&i.OrganizationID,
			&i.InstanceNum,
			&i.Dateint,
			&i.FrequencyMs,
			&i.Signal,
			&i.Action,
			&i.NeedsRun,
			&i.Tries,
			&i.TsRange,
			&i.ClaimedBy,
			&i.ClaimedAt,
			&i.HeartbeatedAt,
			&i.SlotID,
			&i.LocksRemoved,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const workQueueCompleteDirect = `-- name: WorkQueueCompleteDirect :exec
WITH updated AS (
  UPDATE public.work_queue w
  SET
    claimed_by     = -1,
    claimed_at     = NULL,
    heartbeated_at = NOW(),
    needs_run      = FALSE,
    runnable_at    = NOW(),
    tries          = 0
  WHERE w.id         = $2::BIGINT
    AND w.claimed_by = $1
  RETURNING id
)
DELETE FROM public.signal_locks sl
USING updated u
WHERE sl.work_id    = u.id
  AND sl.claimed_by = $1
`

type WorkQueueCompleteParams struct {
	WorkerID int64 `json:"worker_id"`
	ID       int64 `json:"id"`
}

func (q *Queries) WorkQueueCompleteDirect(ctx context.Context, arg WorkQueueCompleteParams) error {
	_, err := q.db.Exec(ctx, workQueueCompleteDirect, arg.WorkerID, arg.ID)
	return err
}

const workQueueDeleteDirect = `-- name: WorkQueueDeleteDirect :exec
DELETE FROM public.work_queue
WHERE id = $1::BIGINT
  AND claimed_by = $2
`

type WorkQueueDeleteParams struct {
	ID       int64 `json:"id"`
	WorkerID int64 `json:"worker_id"`
}

func (q *Queries) WorkQueueDeleteDirect(ctx context.Context, arg WorkQueueDeleteParams) error {
	_, err := q.db.Exec(ctx, workQueueDeleteDirect, arg.ID, arg.WorkerID)
	return err
}

const workQueueExtendedStatus = `-- name: WorkQueueExtendedStatus :many
WITH unclaimed_summary AS (
  SELECT 
    signal, 
    action,
    count(*) AS unclaimed_count
  FROM work_queue
  WHERE needs_run = true 
    AND runnable_at <= now() 
    AND claimed_by = -1
  GROUP BY signal, action
),
claimed_details AS (
  SELECT 
    signal,
    action,
    ts_range,
    claimed_by,
    claimed_at AT TIME ZONE 'UTC' AS claimed_at_utc,
    heartbeated_at AT TIME ZONE 'UTC' AS heartbeated_at_utc,
    EXTRACT(EPOCH FROM (now() - heartbeated_at)) AS age_seconds,
    CASE 
      WHEN heartbeated_at < now() - INTERVAL '2.5 minutes' THEN true
      ELSE false
    END AS is_stale
  FROM work_queue
  WHERE claimed_by > 0
)
SELECT 
  signal,
  action,
  'unclaimed'::text AS row_type,
  unclaimed_count::bigint AS count_or_claimed_by,
  NULL::tstzrange AS ts_range,
  NULL::timestamptz AS claimed_at_utc,
  NULL::timestamptz AS heartbeated_at_utc,
  NULL::double precision AS age_seconds,
  false AS is_stale
FROM unclaimed_summary
UNION ALL
SELECT 
  signal,
  action,
  'claimed'::text AS row_type,
  claimed_by AS count_or_claimed_by,
  ts_range,
  claimed_at_utc,
  heartbeated_at_utc,
  age_seconds,
  is_stale
FROM claimed_details
ORDER BY signal, action, row_type DESC
`

type WorkQueueExtendedStatusRow struct {
	Signal           SignalEnum                       `json:"signal"`
	Action           ActionEnum                       `json:"action"`
	RowType          string                           `json:"row_type"`
	CountOrClaimedBy int64                            `json:"count_or_claimed_by"`
	TsRange          pgtype.Range[pgtype.Timestamptz] `json:"ts_range"`
	ClaimedAtUtc     *time.Time                       `json:"claimed_at_utc"`
	HeartbeatedAtUtc *time.Time                       `json:"heartbeated_at_utc"`
	AgeSeconds       *float64                         `json:"age_seconds"`
	IsStale          bool                             `json:"is_stale"`
}

// First, return unclaimed summaries
// Then, return claimed details
func (q *Queries) WorkQueueExtendedStatus(ctx context.Context) ([]WorkQueueExtendedStatusRow, error) {
	rows, err := q.db.Query(ctx, workQueueExtendedStatus)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []WorkQueueExtendedStatusRow
	for rows.Next() {
		var i WorkQueueExtendedStatusRow
		if err := rows.Scan(
			&i.Signal,
			&i.Action,
			&i.RowType,
			&i.CountOrClaimedBy,
			&i.TsRange,
			&i.ClaimedAtUtc,
			&i.HeartbeatedAtUtc,
			&i.AgeSeconds,
			&i.IsStale,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const workQueueFailDirect = `-- name: WorkQueueFailDirect :exec
WITH params AS (
  SELECT
    NOW()                                         AS v_now,
    $3::INTERVAL                        AS requeue_ttl,
    $4::INTEGER                         AS max_retries
),
old AS (
  SELECT w.tries
  FROM public.work_queue w
  WHERE w.id         = $1::BIGINT
    AND w.claimed_by = $2
),
updated AS (
  UPDATE public.work_queue w
  SET
    claimed_by     = -1,
    claimed_at     = NULL,
    heartbeated_at = (SELECT v_now FROM params),
    tries =
      CASE
        WHEN o.tries IS NULL THEN 1
        ELSE o.tries + 1
      END,
    runnable_at =
      CASE
        WHEN o.tries + 1 <= (SELECT max_retries FROM params)
          THEN (SELECT v_now FROM params) + (SELECT requeue_ttl FROM params)
        ELSE w.runnable_at
      END,
    needs_run =
      CASE
        WHEN o.tries + 1 <= (SELECT max_retries FROM params) THEN TRUE
        ELSE FALSE
      END
  FROM old o
  WHERE w.id         = $1::BIGINT
    AND w.claimed_by = $2
)
DELETE FROM public.signal_locks sl
WHERE sl.work_id    = $1::BIGINT
  AND sl.claimed_by = $2
`

type WorkQueueFailParams struct {
	ID         int64         `json:"id"`
	WorkerID   int64         `json:"worker_id"`
	RequeueTtl time.Duration `json:"requeue_ttl"`
	MaxRetries int32         `json:"max_retries"`
}

func (q *Queries) WorkQueueFailDirect(ctx context.Context, arg WorkQueueFailParams) error {
	_, err := q.db.Exec(ctx, workQueueFailDirect,
		arg.ID,
		arg.WorkerID,
		arg.RequeueTtl,
		arg.MaxRetries,
	)
	return err
}

const workQueueGC = `-- name: WorkQueueGC :one
WITH doomed AS (
  SELECT w.id
  FROM public.work_queue AS w
  WHERE w.claimed_by = -1
    AND NOT w.needs_run
    AND w.runnable_at < $1
  ORDER BY w.runnable_at
  LIMIT $2
  FOR UPDATE SKIP LOCKED
),
del_wq AS (
  DELETE FROM public.work_queue AS w
  USING doomed AS d
  WHERE w.id = d.id
  RETURNING 1
)
SELECT COALESCE(COUNT(*), 0)::int AS deleted
FROM del_wq
`

type WorkQueueGCParams struct {
	Cutoff  time.Time `json:"cutoff"`
	Maxrows int32     `json:"maxrows"`
}

func (q *Queries) WorkQueueGC(ctx context.Context, arg WorkQueueGCParams) (int32, error) {
	row := q.db.QueryRow(ctx, workQueueGC, arg.Cutoff, arg.Maxrows)
	var deleted int32
	err := row.Scan(&deleted)
	return deleted, err
}

const workQueueGlobalLock = `-- name: WorkQueueGlobalLock :exec
SELECT pg_advisory_xact_lock(hashtext('work_queue_global')::bigint)
`

func (q *Queries) WorkQueueGlobalLock(ctx context.Context) error {
	_, err := q.db.Exec(ctx, workQueueGlobalLock)
	return err
}

const workQueueHeartbeatDirect = `-- name: WorkQueueHeartbeatDirect :exec
UPDATE public.work_queue w
SET heartbeated_at = NOW()
WHERE w.id         = ANY($1::BIGINT[])
  AND w.claimed_by = $2
`

type WorkQueueHeartbeatParams struct {
	Ids      []int64 `json:"ids"`
	WorkerID int64   `json:"worker_id"`
}

// 1) heart-beat the work_queue
func (q *Queries) WorkQueueHeartbeatDirect(ctx context.Context, arg WorkQueueHeartbeatParams) error {
	_, err := q.db.Exec(ctx, workQueueHeartbeatDirect, arg.Ids, arg.WorkerID)
	return err
}

const workQueueOrphanedSignalLockCleanup = `-- name: WorkQueueOrphanedSignalLockCleanup :one
WITH params AS (
  SELECT pg_advisory_xact_lock(hashtext('work_queue_global')::bigint) AS locked
),
orphaned AS (
  SELECT sl.id
  FROM public.signal_locks sl
  LEFT JOIN public.work_queue wq ON sl.work_id = wq.id
  WHERE wq.id IS NULL
  ORDER BY sl.id
  LIMIT $1
),
deleted AS (
  DELETE FROM public.signal_locks sl
  USING orphaned o
  WHERE sl.id = o.id
  RETURNING 1
)
SELECT COALESCE(COUNT(*), 0)::int AS deleted
FROM deleted
`

func (q *Queries) WorkQueueOrphanedSignalLockCleanup(ctx context.Context, maxrows int32) (int32, error) {
	row := q.db.QueryRow(ctx, workQueueOrphanedSignalLockCleanup, maxrows)
	var deleted int32
	err := row.Scan(&deleted)
	return deleted, err
}

const workQueueSummary = `-- name: WorkQueueSummary :many
SELECT count(*) AS count, signal, action
FROM work_queue
WHERE needs_run = true AND runnable_at <= now()
GROUP BY signal, action
ORDER BY signal, action
`

type WorkQueueSummaryRow struct {
	Count  int64      `json:"count"`
	Signal SignalEnum `json:"signal"`
	Action ActionEnum `json:"action"`
}

func (q *Queries) WorkQueueSummary(ctx context.Context) ([]WorkQueueSummaryRow, error) {
	rows, err := q.db.Query(ctx, workQueueSummary)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []WorkQueueSummaryRow
	for rows.Next() {
		var i WorkQueueSummaryRow
		if err := rows.Scan(&i.Count, &i.Signal, &i.Action); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
