-- 1756510408_metric_compaction_queue.up.sql

-- Code generated by database migration. DO NOT EDIT.

-- ===== Work queue table =====
CREATE TABLE IF NOT EXISTS metric_compaction_queue (
  id              BIGSERIAL   PRIMARY KEY,
  queue_ts        TIMESTAMPTZ NOT NULL DEFAULT now(),
  priority        INTEGER     NOT NULL DEFAULT 0,
  organization_id UUID        NOT NULL,
  dateint         INTEGER     NOT NULL,
  frequency_ms    BIGINT      NOT NULL,
  segment_id      BIGINT      NOT NULL,
  instance_num    SMALLINT    NOT NULL,
  ts_range        TSTZRANGE   NOT NULL,
  record_count    BIGINT      NOT NULL,
  tries           INTEGER     NOT NULL DEFAULT 0,
  claimed_by      BIGINT      NOT NULL DEFAULT -1,
  claimed_at      TIMESTAMPTZ
);

-- Global ready ordering (ranking / tie-break friendly)
CREATE INDEX IF NOT EXISTS idx_mcq_ready_global
ON metric_compaction_queue (priority DESC, queue_ts, id)
WHERE claimed_at IS NULL;

-- Per-group ordered slice
CREATE INDEX IF NOT EXISTS idx_mcq_ready_group
ON metric_compaction_queue (
  organization_id, dateint, frequency_ms, instance_num,
  priority DESC, queue_ts, id
)
WHERE claimed_at IS NULL;

-- Big-row fast path
CREATE INDEX IF NOT EXISTS idx_mcq_ready_bigrow
ON metric_compaction_queue (record_count DESC, priority DESC, queue_ts, id)
WHERE claimed_at IS NULL;

-- Timeout sweeper
CREATE INDEX IF NOT EXISTS idx_mcq_claimed_at_nonnull
ON metric_compaction_queue (claimed_at)
WHERE claimed_at IS NOT NULL;

-- ===== Record-count estimates (per org+frequency, global via zero-UUID) =====
CREATE TABLE IF NOT EXISTS metric_pack_estimate (
  organization_id UUID    NOT NULL,  -- use 00000000-0000-0000-0000-000000000000 for global
  frequency_ms    BIGINT  NOT NULL,
  target_records  BIGINT,
  updated_at      TIMESTAMPTZ NOT NULL DEFAULT now(),
  PRIMARY KEY (organization_id, frequency_ms)
);

-- Optional helper indexes
CREATE INDEX IF NOT EXISTS idx_mpe_freq_global
  ON metric_pack_estimate (frequency_ms)
  WHERE organization_id = '00000000-0000-0000-0000-000000000000'::uuid;

INSERT INTO metric_pack_estimate (organization_id, frequency_ms, target_records)
VALUES ('00000000-0000-0000-0000-000000000000',   10000, 40000),
       ('00000000-0000-0000-0000-000000000000',   60000, 40000),
       ('00000000-0000-0000-0000-000000000000',  300000, 40000),
       ('00000000-0000-0000-0000-000000000000', 1200000, 40000),
       ('00000000-0000-0000-0000-000000000000', 3600000, 40000)
ON CONFLICT (organization_id, frequency_ms) DO UPDATE
SET target_records = EXCLUDED.target_records,
    updated_at     = now();
