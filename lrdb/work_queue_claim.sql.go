// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: work_queue_claim.sql

package lrdb

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const workQueueClaimDirect = `-- name: WorkQueueClaimDirect :one
WITH
  v_now AS (
    SELECT NOW() AS ts
  ),

  target_freqs AS (
    SELECT unnest($1::INTEGER[]) AS freq
  ),

  -- Only used for rollup actions (compact doesn't expand)
  rollup_sources(parent_freq_ms, child_freq_ms) AS (
    VALUES
      (60000,    10000),
      (300000,   60000),
      (1200000,  300000),
      (3600000, 1200000)
  ),

  sl_small AS MATERIALIZED (
    SELECT id, work_id, organization_id, instance_num, dateint, frequency_ms, signal, ts_range, claimed_by, claimed_at, heartbeated_at, slot_id
    FROM public.signal_locks sl
    WHERE
      sl.signal = $2
      AND sl.frequency_ms = ANY (
        ARRAY(SELECT freq FROM target_freqs)
        || COALESCE(
             (SELECT array_agg(child_freq_ms)
              FROM rollup_sources
              WHERE parent_freq_ms = ANY(SELECT freq FROM target_freqs)
                AND $3::action_enum = 'rollup'),
             '{}'
           )
      )
  ),

  -- Find a candidate work item that:
  -- - matches the requested signal, action, and target frequencies
  -- - has priority >= min_priority
  -- - is runnable now
  -- - is not blocked by an existing lock on the same lock key
  -- - needs to run
  candidate AS (
    SELECT w.id, w.priority, w.runnable_at, w.organization_id, w.instance_num, w.dateint, w.frequency_ms, w.signal, w.action, w.needs_run, w.tries, w.ts_range, w.claimed_by, w.claimed_at, w.heartbeated_at, w.slot_id
    FROM public.work_queue w
    LEFT JOIN sl_small sl
      ON sl.organization_id = w.organization_id
     AND sl.instance_num    = w.instance_num
     AND sl.signal          = w.signal
     AND sl.slot_id         = w.slot_id
     AND sl.ts_range        && w.ts_range
     AND sl.work_id         <> w.id
    WHERE
      w.frequency_ms = ANY (SELECT freq FROM target_freqs)
      AND w.priority       >= $4
      AND w.signal         = $2
      AND w.action         = $3
      AND w.runnable_at   <= (SELECT ts FROM v_now)
      AND sl.id IS NULL
      AND w.needs_run
    ORDER BY
      w.needs_run DESC,
      w.priority  DESC,
      w.runnable_at,
      w.id
    LIMIT 1
    FOR UPDATE SKIP LOCKED
  ),

  -- Lock the candidate's own frequency, and (for rollup) its child frequency too.
  lock_map AS (
    SELECT c.frequency_ms AS lock_freq_ms
    FROM candidate c

    UNION ALL

    SELECT rs.child_freq_ms AS lock_freq_ms
    FROM candidate c
    JOIN rollup_sources rs
      ON c.frequency_ms = rs.parent_freq_ms
    WHERE $3 = 'rollup'
  ),

  -- Clear any stale locks tied to this work_id (idempotence).
  cleanup_locks AS (
    DELETE FROM public.signal_locks sl
    USING candidate c
    WHERE sl.work_id = c.id
  ),

  -- Insert fresh locks bound to the candidate's slot.
  new_locks AS (
    INSERT INTO public.signal_locks (
      organization_id, instance_num, dateint,
      frequency_ms,    signal,       claimed_by,
      claimed_at,      ts_range,     work_id,
      slot_id
    )
    SELECT
      c.organization_id,
      c.instance_num,
      c.dateint,
      lm.lock_freq_ms,
      c.signal,
      $5,
      (SELECT ts FROM v_now),
      c.ts_range,
      c.id,
      c.slot_id
    FROM candidate c
    CROSS JOIN lock_map lm
    ORDER BY lm.lock_freq_ms
  ),

  -- Claim the work item.
  updated AS (
    UPDATE public.work_queue w
    SET
      claimed_by     = $5,
      claimed_at     = (SELECT ts FROM v_now),
      heartbeated_at = (SELECT ts FROM v_now),
      needs_run      = FALSE,
      tries          = w.tries + 1
    FROM candidate c
    WHERE w.id = c.id
    RETURNING w.id, w.priority, w.runnable_at, w.organization_id, w.instance_num, w.dateint, w.frequency_ms, w.signal, w.action, w.needs_run, w.tries, w.ts_range, w.claimed_by, w.claimed_at, w.heartbeated_at, w.slot_id
  )

SELECT id, priority, runnable_at, organization_id, instance_num, dateint, frequency_ms, signal, action, needs_run, tries, ts_range, claimed_by, claimed_at, heartbeated_at, slot_id FROM updated
`

type WorkQueueClaimParams struct {
	TargetFreqs []int32    `json:"target_freqs"`
	Signal      SignalEnum `json:"signal"`
	Action      ActionEnum `json:"action"`
	MinPriority int32      `json:"min_priority"`
	WorkerID    int64      `json:"worker_id"`
}

type WorkQueueClaimRow struct {
	ID             int64                            `json:"id"`
	Priority       int32                            `json:"priority"`
	RunnableAt     time.Time                        `json:"runnable_at"`
	OrganizationID uuid.UUID                        `json:"organization_id"`
	InstanceNum    int16                            `json:"instance_num"`
	Dateint        int32                            `json:"dateint"`
	FrequencyMs    int32                            `json:"frequency_ms"`
	Signal         SignalEnum                       `json:"signal"`
	Action         ActionEnum                       `json:"action"`
	NeedsRun       bool                             `json:"needs_run"`
	Tries          int32                            `json:"tries"`
	TsRange        pgtype.Range[pgtype.Timestamptz] `json:"ts_range"`
	ClaimedBy      int64                            `json:"claimed_by"`
	ClaimedAt      *time.Time                       `json:"claimed_at"`
	HeartbeatedAt  time.Time                        `json:"heartbeated_at"`
	SlotID         int32                            `json:"slot_id"`
}

func (q *Queries) WorkQueueClaimDirect(ctx context.Context, arg WorkQueueClaimParams) (WorkQueueClaimRow, error) {
	row := q.db.QueryRow(ctx, workQueueClaimDirect,
		arg.TargetFreqs,
		arg.Signal,
		arg.Action,
		arg.MinPriority,
		arg.WorkerID,
	)
	var i WorkQueueClaimRow
	err := row.Scan(
		&i.ID,
		&i.Priority,
		&i.RunnableAt,
		&i.OrganizationID,
		&i.InstanceNum,
		&i.Dateint,
		&i.FrequencyMs,
		&i.Signal,
		&i.Action,
		&i.NeedsRun,
		&i.Tries,
		&i.TsRange,
		&i.ClaimedBy,
		&i.ClaimedAt,
		&i.HeartbeatedAt,
		&i.SlotID,
	)
	return i, err
}
