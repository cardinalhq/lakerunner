// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: exemplar_logs.sql

package lrdb

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const getExemplarLogsByFingerprint = `-- name: GetExemplarLogsByFingerprint :one
SELECT created_at, updated_at, organization_id, collector_id, processor_id, service_identifier_id, attributes, exemplar, fingerprint, related_fingerprints FROM exemplar_logs 
WHERE organization_id = $1 
  AND fingerprint = $2
LIMIT 1
`

type GetExemplarLogsByFingerprintParams struct {
	OrganizationID uuid.UUID `json:"organization_id"`
	Fingerprint    int64     `json:"fingerprint"`
}

func (q *Queries) GetExemplarLogsByFingerprint(ctx context.Context, arg GetExemplarLogsByFingerprintParams) (ExemplarLog, error) {
	row := q.db.QueryRow(ctx, getExemplarLogsByFingerprint, arg.OrganizationID, arg.Fingerprint)
	var i ExemplarLog
	err := row.Scan(
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.OrganizationID,
		&i.CollectorID,
		&i.ProcessorID,
		&i.ServiceIdentifierID,
		&i.Attributes,
		&i.Exemplar,
		&i.Fingerprint,
		&i.RelatedFingerprints,
	)
	return i, err
}

const getExemplarLogsByService = `-- name: GetExemplarLogsByService :many
SELECT created_at, updated_at, organization_id, collector_id, processor_id, service_identifier_id, attributes, exemplar, fingerprint, related_fingerprints FROM exemplar_logs 
WHERE organization_id = $1 
  AND service_identifier_id = $2
ORDER BY created_at DESC
`

type GetExemplarLogsByServiceParams struct {
	OrganizationID      uuid.UUID `json:"organization_id"`
	ServiceIdentifierID uuid.UUID `json:"service_identifier_id"`
}

func (q *Queries) GetExemplarLogsByService(ctx context.Context, arg GetExemplarLogsByServiceParams) ([]ExemplarLog, error) {
	rows, err := q.db.Query(ctx, getExemplarLogsByService, arg.OrganizationID, arg.ServiceIdentifierID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ExemplarLog
	for rows.Next() {
		var i ExemplarLog
		if err := rows.Scan(
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.OrganizationID,
			&i.CollectorID,
			&i.ProcessorID,
			&i.ServiceIdentifierID,
			&i.Attributes,
			&i.Exemplar,
			&i.Fingerprint,
			&i.RelatedFingerprints,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getExemplarLogsCreatedAfter = `-- name: GetExemplarLogsCreatedAfter :many
SELECT created_at, updated_at, organization_id, collector_id, processor_id, service_identifier_id, attributes, exemplar, fingerprint, related_fingerprints FROM exemplar_logs WHERE created_at > $1
`

func (q *Queries) GetExemplarLogsCreatedAfter(ctx context.Context, ts time.Time) ([]ExemplarLog, error) {
	rows, err := q.db.Query(ctx, getExemplarLogsCreatedAfter, ts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ExemplarLog
	for rows.Next() {
		var i ExemplarLog
		if err := rows.Scan(
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.OrganizationID,
			&i.CollectorID,
			&i.ProcessorID,
			&i.ServiceIdentifierID,
			&i.Attributes,
			&i.Exemplar,
			&i.Fingerprint,
			&i.RelatedFingerprints,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
