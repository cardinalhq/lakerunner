// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: exemplar_traces.sql

package lrdb

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const getExemplarTracesByFingerprint = `-- name: GetExemplarTracesByFingerprint :one
SELECT created_at, updated_at, organization_id, collector_id, processor_id, service_identifier_id, attributes, exemplar, fingerprint, span_name, span_kind FROM exemplar_traces 
WHERE organization_id = $1 
  AND fingerprint = $2
LIMIT 1
`

type GetExemplarTracesByFingerprintParams struct {
	OrganizationID uuid.UUID `json:"organization_id"`
	Fingerprint    int64     `json:"fingerprint"`
}

func (q *Queries) GetExemplarTracesByFingerprint(ctx context.Context, arg GetExemplarTracesByFingerprintParams) (ExemplarTrace, error) {
	row := q.db.QueryRow(ctx, getExemplarTracesByFingerprint, arg.OrganizationID, arg.Fingerprint)
	var i ExemplarTrace
	err := row.Scan(
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.OrganizationID,
		&i.CollectorID,
		&i.ProcessorID,
		&i.ServiceIdentifierID,
		&i.Attributes,
		&i.Exemplar,
		&i.Fingerprint,
		&i.SpanName,
		&i.SpanKind,
	)
	return i, err
}

const getExemplarTracesByService = `-- name: GetExemplarTracesByService :many
SELECT created_at, updated_at, organization_id, collector_id, processor_id, service_identifier_id, attributes, exemplar, fingerprint, span_name, span_kind FROM exemplar_traces 
WHERE organization_id = $1 
  AND service_identifier_id = $2
ORDER BY created_at DESC
`

type GetExemplarTracesByServiceParams struct {
	OrganizationID      uuid.UUID `json:"organization_id"`
	ServiceIdentifierID uuid.UUID `json:"service_identifier_id"`
}

func (q *Queries) GetExemplarTracesByService(ctx context.Context, arg GetExemplarTracesByServiceParams) ([]ExemplarTrace, error) {
	rows, err := q.db.Query(ctx, getExemplarTracesByService, arg.OrganizationID, arg.ServiceIdentifierID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ExemplarTrace
	for rows.Next() {
		var i ExemplarTrace
		if err := rows.Scan(
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.OrganizationID,
			&i.CollectorID,
			&i.ProcessorID,
			&i.ServiceIdentifierID,
			&i.Attributes,
			&i.Exemplar,
			&i.Fingerprint,
			&i.SpanName,
			&i.SpanKind,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getExemplarTracesCreatedAfter = `-- name: GetExemplarTracesCreatedAfter :many
SELECT created_at, updated_at, organization_id, collector_id, processor_id, service_identifier_id, attributes, exemplar, fingerprint, span_name, span_kind FROM exemplar_traces WHERE created_at > $1
`

func (q *Queries) GetExemplarTracesCreatedAfter(ctx context.Context, ts time.Time) ([]ExemplarTrace, error) {
	rows, err := q.db.Query(ctx, getExemplarTracesCreatedAfter, ts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ExemplarTrace
	for rows.Next() {
		var i ExemplarTrace
		if err := rows.Scan(
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.OrganizationID,
			&i.CollectorID,
			&i.ProcessorID,
			&i.ServiceIdentifierID,
			&i.Attributes,
			&i.Exemplar,
			&i.Fingerprint,
			&i.SpanName,
			&i.SpanKind,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSpanInfoByFingerprint = `-- name: GetSpanInfoByFingerprint :one
SELECT exemplar, span_name, span_kind
FROM exemplar_traces
WHERE organization_id = $1 AND fingerprint = $2
LIMIT 1
`

type GetSpanInfoByFingerprintParams struct {
	OrganizationID uuid.UUID `json:"organization_id"`
	Fingerprint    int64     `json:"fingerprint"`
}

type GetSpanInfoByFingerprintRow struct {
	Exemplar map[string]any `json:"exemplar"`
	SpanName string         `json:"span_name"`
	SpanKind int32          `json:"span_kind"`
}

func (q *Queries) GetSpanInfoByFingerprint(ctx context.Context, arg GetSpanInfoByFingerprintParams) (GetSpanInfoByFingerprintRow, error) {
	row := q.db.QueryRow(ctx, getSpanInfoByFingerprint, arg.OrganizationID, arg.Fingerprint)
	var i GetSpanInfoByFingerprintRow
	err := row.Scan(&i.Exemplar, &i.SpanName, &i.SpanKind)
	return i, err
}
