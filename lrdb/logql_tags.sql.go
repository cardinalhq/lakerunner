// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: logql_tags.sql

package lrdb

import (
	"context"

	"github.com/google/uuid"
)

const listLogQLTags = `-- name: ListLogQLTags :many
WITH src AS (
  SELECT exemplar::jsonb AS exemplar
  FROM exemplar_logs
  WHERE organization_id = $1
),
res_keys AS (
  SELECT DISTINCT ('resource.' || (attr->>'key'))::text AS k
  FROM src
  CROSS JOIN LATERAL jsonb_array_elements(COALESCE(exemplar->'resourceLogs','[]'::jsonb)) rl
  CROSS JOIN LATERAL jsonb_array_elements(COALESCE(rl->'resource'->'attributes','[]'::jsonb)) attr
),
log_keys AS (
  SELECT DISTINCT ('log.' || (attr->>'key'))::text AS k
  FROM src
  CROSS JOIN LATERAL jsonb_array_elements(COALESCE(exemplar->'resourceLogs','[]'::jsonb)) rl
  CROSS JOIN LATERAL jsonb_array_elements(COALESCE(rl->'scopeLogs','[]'::jsonb)) sl
  CROSS JOIN LATERAL jsonb_array_elements(COALESCE(sl->'logRecords','[]'::jsonb)) rec
  CROSS JOIN LATERAL jsonb_array_elements(COALESCE(rec->'attributes','[]'::jsonb)) attr
)
SELECT k AS tag_key
FROM (
  SELECT k FROM res_keys
  UNION
  SELECT k FROM log_keys
) all_keys
ORDER BY k
`

func (q *Queries) ListLogQLTags(ctx context.Context, organizationID uuid.UUID) ([]string, error) {
	rows, err := q.db.Query(ctx, listLogQLTags, organizationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var tag_key string
		if err := rows.Scan(&tag_key); err != nil {
			return nil, err
		}
		items = append(items, tag_key)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
