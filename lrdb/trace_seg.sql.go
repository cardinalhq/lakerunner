// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: trace_seg.sql

package lrdb

import (
	"context"

	"github.com/google/uuid"
)

const compactTraceSegments = `-- name: CompactTraceSegments :exec
WITH
  all_fp AS (
    SELECT unnest(fingerprints) AS fp
      FROM trace_seg
     WHERE organization_id = $1
       AND dateint        = $2
       AND instance_num   = $5
       AND slot_id = $6
       AND segment_id     = ANY($12::bigint[])
  ),
  fingerprint_array AS (
    SELECT coalesce(
      array_agg(DISTINCT fp ORDER BY fp),
      '{}'::bigint[]
    ) AS fingerprints
    FROM all_fp
  ),
  deleted_seg AS (
    DELETE FROM trace_seg
     WHERE organization_id = $1
       AND dateint        = $2
       AND instance_num   = $5
       AND segment_id     = ANY($12::bigint[])
  )
INSERT INTO trace_seg (
  organization_id,
  dateint,
  ingest_dateint,
  segment_id,
  instance_num,
  slot_id,
  record_count,
  file_size,
  ts_range,
  created_by,
  fingerprints
)
SELECT
  $1,
  $2,
  $3,
  $4,
  $5,
  $6,
  $7,
  $8,
  int8range($9, $10, '[)'),
  $11,
  fa.fingerprints
FROM fingerprint_array AS fa
`

type CompactTraceSegmentsParams struct {
	OrganizationID uuid.UUID `json:"organization_id"`
	Dateint        int32     `json:"dateint"`
	IngestDateint  int32     `json:"ingest_dateint"`
	NewSegmentID   int64     `json:"new_segment_id"`
	InstanceNum    int16     `json:"instance_num"`
	SlotID         int32     `json:"slot_id"`
	NewRecordCount int64     `json:"new_record_count"`
	NewFileSize    int64     `json:"new_file_size"`
	NewStartTs     int64     `json:"new_start_ts"`
	NewEndTs       int64     `json:"new_end_ts"`
	CreatedBy      CreatedBy `json:"created_by"`
	OldSegmentIds  []int64   `json:"old_segment_ids"`
}

func (q *Queries) CompactTraceSegments(ctx context.Context, arg CompactTraceSegmentsParams) error {
	_, err := q.db.Exec(ctx, compactTraceSegments,
		arg.OrganizationID,
		arg.Dateint,
		arg.IngestDateint,
		arg.NewSegmentID,
		arg.InstanceNum,
		arg.SlotID,
		arg.NewRecordCount,
		arg.NewFileSize,
		arg.NewStartTs,
		arg.NewEndTs,
		arg.CreatedBy,
		arg.OldSegmentIds,
	)
	return err
}

const insertTraceSegmentDirect = `-- name: insertTraceSegmentDirect :exec
INSERT INTO trace_seg (
  organization_id,
  dateint,
  ingest_dateint,
  segment_id,
  instance_num,
  slot_id,
  ts_range,
  record_count,
  file_size,
  created_by,
  fingerprints
)
VALUES (
  $1,
  $2,
  $3,
  $4,
  $5,
  $6,
  int8range($7, $8, '[)'),
  $9,
  $10,
  $11,
  $12::bigint[]
)
`

type InsertTraceSegmentParams struct {
	OrganizationID uuid.UUID `json:"organization_id"`
	Dateint        int32     `json:"dateint"`
	IngestDateint  int32     `json:"ingest_dateint"`
	SegmentID      int64     `json:"segment_id"`
	InstanceNum    int16     `json:"instance_num"`
	SlotID         int32     `json:"slot_id"`
	StartTs        int64     `json:"start_ts"`
	EndTs          int64     `json:"end_ts"`
	RecordCount    int64     `json:"record_count"`
	FileSize       int64     `json:"file_size"`
	CreatedBy      CreatedBy `json:"created_by"`
	Fingerprints   []int64   `json:"fingerprints"`
}

func (q *Queries) insertTraceSegmentDirect(ctx context.Context, arg InsertTraceSegmentParams) error {
	_, err := q.db.Exec(ctx, insertTraceSegmentDirect,
		arg.OrganizationID,
		arg.Dateint,
		arg.IngestDateint,
		arg.SegmentID,
		arg.InstanceNum,
		arg.SlotID,
		arg.StartTs,
		arg.EndTs,
		arg.RecordCount,
		arg.FileSize,
		arg.CreatedBy,
		arg.Fingerprints,
	)
	return err
}
