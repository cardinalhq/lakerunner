// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: inqueue_claim.sql

package lrdb

import (
	"context"
)

const claimInqueueWork = `-- name: ClaimInqueueWork :one
UPDATE inqueue AS i
SET
  claimed_by = $1,
  claimed_at = NOW()
WHERE i.id = (
  SELECT ii.id
  FROM inqueue ii
  WHERE ii.claimed_at IS NULL
    AND ii.telemetry_type = $2
  ORDER BY ii.priority DESC, ii.queue_ts
  LIMIT 1
  FOR UPDATE SKIP LOCKED
)
RETURNING id, queue_ts, priority, organization_id, collector_name, instance_num, bucket, object_id, telemetry_type, tries, claimed_by, claimed_at, file_size
`

type ClaimInqueueWorkParams struct {
	ClaimedBy     int64  `json:"claimed_by"`
	TelemetryType string `json:"telemetry_type"`
}

func (q *Queries) ClaimInqueueWork(ctx context.Context, arg ClaimInqueueWorkParams) (Inqueue, error) {
	row := q.db.QueryRow(ctx, claimInqueueWork, arg.ClaimedBy, arg.TelemetryType)
	var i Inqueue
	err := row.Scan(
		&i.ID,
		&i.QueueTs,
		&i.Priority,
		&i.OrganizationID,
		&i.CollectorName,
		&i.InstanceNum,
		&i.Bucket,
		&i.ObjectID,
		&i.TelemetryType,
		&i.Tries,
		&i.ClaimedBy,
		&i.ClaimedAt,
		&i.FileSize,
	)
	return i, err
}
