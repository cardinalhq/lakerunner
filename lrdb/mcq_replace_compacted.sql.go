// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: mcq_replace_compacted.sql

package lrdb

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const replaceCompactedMetricSegs = `-- name: ReplaceCompactedMetricSegs :exec
WITH
old_segments_update AS (
  UPDATE metric_seg 
  SET compacted = true, published = false
  WHERE organization_id = $1
    AND dateint = $2  
    AND frequency_ms = $3
    AND instance_num = $5
    AND segment_id = ANY($15::bigint[])
    AND compacted = false  -- Safety: only update non-compacted segments
  RETURNING segment_id
)
INSERT INTO metric_seg (
  organization_id, dateint, frequency_ms, segment_id, instance_num,
  ts_range, record_count, file_size, ingest_dateint, 
  compacted, published, created_by, slot_id, fingerprints, sort_version, slot_count
)
SELECT 
  $1::uuid,
  $2::int,
  $3::int,
  unnest($4::bigint[]),
  $5::smallint,
  unnest($6::int8range[]),
  unnest($7::bigint[]),
  unnest($8::bigint[]),
  $9::int,
  false,  -- compacted=false
  true,   -- published=true  
  $10,
  $11::int,
  unnest($12::bigint[][]),
  $13::smallint,
  $14::int
`

type ReplaceCompactedMetricSegsParams struct {
	OrganizationID  uuid.UUID                   `json:"organization_id"`
	Dateint         int32                       `json:"dateint"`
	FrequencyMs     int32                       `json:"frequency_ms"`
	NewSegmentIds   []int64                     `json:"new_segment_ids"`
	InstanceNum     int16                       `json:"instance_num"`
	NewTsRanges     []pgtype.Range[pgtype.Int8] `json:"new_ts_ranges"`
	NewRecordCounts []int64                     `json:"new_record_counts"`
	NewFileSizes    []int64                     `json:"new_file_sizes"`
	IngestDateint   int32                       `json:"ingest_dateint"`
	CreatedBy       CreatedBy                   `json:"created_by"`
	SlotID          int32                       `json:"slot_id"`
	NewFingerprints [][]int64                   `json:"new_fingerprints"`
	SortVersion     int16                       `json:"sort_version"`
	SlotCount       int32                       `json:"slot_count"`
	OldSegmentIds   []int64                     `json:"old_segment_ids"`
}

// Replace metric segments after compaction: mark old as compacted=true, published=false
// and insert new segments as compacted=false, published=true
func (q *Queries) ReplaceCompactedMetricSegs(ctx context.Context, arg ReplaceCompactedMetricSegsParams) error {
	_, err := q.db.Exec(ctx, replaceCompactedMetricSegs,
		arg.OrganizationID,
		arg.Dateint,
		arg.FrequencyMs,
		arg.NewSegmentIds,
		arg.InstanceNum,
		arg.NewTsRanges,
		arg.NewRecordCounts,
		arg.NewFileSizes,
		arg.IngestDateint,
		arg.CreatedBy,
		arg.SlotID,
		arg.NewFingerprints,
		arg.SortVersion,
		arg.SlotCount,
		arg.OldSegmentIds,
	)
	return err
}
