// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: log_seg_cleanup.sql

package lrdb

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const logSegmentCleanupDelete = `-- name: LogSegmentCleanupDelete :exec
DELETE FROM log_seg
WHERE organization_id = $1
  AND dateint = $2
  AND segment_id = $3
  AND instance_num = $4
`

type LogSegmentCleanupDeleteParams struct {
	OrganizationID uuid.UUID `json:"organization_id"`
	Dateint        int32     `json:"dateint"`
	SegmentID      int64     `json:"segment_id"`
	InstanceNum    int16     `json:"instance_num"`
}

func (q *Queries) LogSegmentCleanupDelete(ctx context.Context, arg LogSegmentCleanupDeleteParams) error {
	_, err := q.db.Exec(ctx, logSegmentCleanupDelete,
		arg.OrganizationID,
		arg.Dateint,
		arg.SegmentID,
		arg.InstanceNum,
	)
	return err
}

const logSegmentCleanupGet = `-- name: LogSegmentCleanupGet :many
SELECT
  organization_id,
  dateint,
  segment_id,
  instance_num,
  file_size,
  lower(ts_range)::bigint as ts_range_lower
FROM log_seg
WHERE organization_id = $1
  AND dateint = $2
  AND published = false
  AND created_at < $3
LIMIT $4
`

type LogSegmentCleanupGetParams struct {
	OrganizationID uuid.UUID `json:"organization_id"`
	Dateint        int32     `json:"dateint"`
	AgeThreshold   time.Time `json:"age_threshold"`
	MaxRows        int32     `json:"max_rows"`
}

type LogSegmentCleanupGetRow struct {
	OrganizationID uuid.UUID `json:"organization_id"`
	Dateint        int32     `json:"dateint"`
	SegmentID      int64     `json:"segment_id"`
	InstanceNum    int16     `json:"instance_num"`
	FileSize       int64     `json:"file_size"`
	TsRangeLower   int64     `json:"ts_range_lower"`
}

func (q *Queries) LogSegmentCleanupGet(ctx context.Context, arg LogSegmentCleanupGetParams) ([]LogSegmentCleanupGetRow, error) {
	rows, err := q.db.Query(ctx, logSegmentCleanupGet,
		arg.OrganizationID,
		arg.Dateint,
		arg.AgeThreshold,
		arg.MaxRows,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []LogSegmentCleanupGetRow
	for rows.Next() {
		var i LogSegmentCleanupGetRow
		if err := rows.Scan(
			&i.OrganizationID,
			&i.Dateint,
			&i.SegmentID,
			&i.InstanceNum,
			&i.FileSize,
			&i.TsRangeLower,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
