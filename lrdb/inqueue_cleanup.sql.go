// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: inqueue_cleanup.sql

package lrdb

import (
	"context"
	"time"
)

const cleanupInqueueWork = `-- name: CleanupInqueueWork :many
UPDATE inqueue
SET claimed_by = -1, claimed_at = NULL, heartbeated_at = NULL
WHERE claimed_by <> -1
  AND heartbeated_at IS NOT NULL 
  AND heartbeated_at < $1
RETURNING id, queue_ts, priority, organization_id, collector_name, instance_num, bucket, object_id, signal, tries, claimed_by, claimed_at, file_size, heartbeated_at
`

func (q *Queries) CleanupInqueueWork(ctx context.Context, cutoffTime *time.Time) ([]Inqueue, error) {
	rows, err := q.db.Query(ctx, cleanupInqueueWork, cutoffTime)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Inqueue
	for rows.Next() {
		var i Inqueue
		if err := rows.Scan(
			&i.ID,
			&i.QueueTs,
			&i.Priority,
			&i.OrganizationID,
			&i.CollectorName,
			&i.InstanceNum,
			&i.Bucket,
			&i.ObjectID,
			&i.Signal,
			&i.Tries,
			&i.ClaimedBy,
			&i.ClaimedAt,
			&i.FileSize,
			&i.HeartbeatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
