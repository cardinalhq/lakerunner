// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: exemplar_metrics.sql

package lrdb

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const getExemplarMetricsByService = `-- name: GetExemplarMetricsByService :many
SELECT created_at, updated_at, organization_id, service_identifier_id, attributes, exemplar, metric_name, metric_type FROM lrdb_exemplar_metrics 
WHERE organization_id = $1 
  AND service_identifier_id = $2
ORDER BY created_at DESC
`

type GetExemplarMetricsByServiceParams struct {
	OrganizationID      uuid.UUID `json:"organization_id"`
	ServiceIdentifierID uuid.UUID `json:"service_identifier_id"`
}

func (q *Queries) GetExemplarMetricsByService(ctx context.Context, arg GetExemplarMetricsByServiceParams) ([]LrdbExemplarMetric, error) {
	rows, err := q.db.Query(ctx, getExemplarMetricsByService, arg.OrganizationID, arg.ServiceIdentifierID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []LrdbExemplarMetric
	for rows.Next() {
		var i LrdbExemplarMetric
		if err := rows.Scan(
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.OrganizationID,
			&i.ServiceIdentifierID,
			&i.Attributes,
			&i.Exemplar,
			&i.MetricName,
			&i.MetricType,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getExemplarMetricsCreatedAfter = `-- name: GetExemplarMetricsCreatedAfter :many
SELECT created_at, updated_at, organization_id, service_identifier_id, attributes, exemplar, metric_name, metric_type FROM lrdb_exemplar_metrics WHERE created_at > $1
`

func (q *Queries) GetExemplarMetricsCreatedAfter(ctx context.Context, ts time.Time) ([]LrdbExemplarMetric, error) {
	rows, err := q.db.Query(ctx, getExemplarMetricsCreatedAfter, ts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []LrdbExemplarMetric
	for rows.Next() {
		var i LrdbExemplarMetric
		if err := rows.Scan(
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.OrganizationID,
			&i.ServiceIdentifierID,
			&i.Attributes,
			&i.Exemplar,
			&i.MetricName,
			&i.MetricType,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
