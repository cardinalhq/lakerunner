// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: obj_cleanup.sql

package lrdb

import (
	"context"

	"github.com/google/uuid"
)

const objectCleanupAdd = `-- name: ObjectCleanupAdd :exec
INSERT INTO obj_cleanup (
  organization_id,
  instance_num,
  bucket_id,
  object_id
) VALUES (
  $1,
  $2,
  $3,
  $4
) ON CONFLICT (organization_id, instance_num, bucket_id, object_id) DO NOTHING
`

type ObjectCleanupAddParams struct {
	OrganizationID uuid.UUID `json:"organization_id"`
	InstanceNum    int16     `json:"instance_num"`
	BucketID       string    `json:"bucket_id"`
	ObjectID       string    `json:"object_id"`
}

func (q *Queries) ObjectCleanupAdd(ctx context.Context, arg ObjectCleanupAddParams) error {
	_, err := q.db.Exec(ctx, objectCleanupAdd,
		arg.OrganizationID,
		arg.InstanceNum,
		arg.BucketID,
		arg.ObjectID,
	)
	return err
}

const objectCleanupComplete = `-- name: ObjectCleanupComplete :exec
DELETE FROM obj_cleanup WHERE id = $1
`

func (q *Queries) ObjectCleanupComplete(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, objectCleanupComplete, id)
	return err
}

const objectCleanupFail = `-- name: ObjectCleanupFail :exec
UPDATE obj_cleanup
SET tries = tries + 1,
    delete_at = NOW() + INTERVAL '1 minute'
WHERE id = $1
`

func (q *Queries) ObjectCleanupFail(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, objectCleanupFail, id)
	return err
}

const objectCleanupGet = `-- name: ObjectCleanupGet :many
SELECT
  id,
  organization_id,
  instance_num,
  bucket_id,
  object_id
FROM obj_cleanup
WHERE delete_at < NOW()
  AND tries < 10
ORDER BY delete_at ASC
LIMIT 1000
`

type ObjectCleanupGetRow struct {
	ID             uuid.UUID `json:"id"`
	OrganizationID uuid.UUID `json:"organization_id"`
	InstanceNum    int16     `json:"instance_num"`
	BucketID       string    `json:"bucket_id"`
	ObjectID       string    `json:"object_id"`
}

func (q *Queries) ObjectCleanupGet(ctx context.Context) ([]ObjectCleanupGetRow, error) {
	rows, err := q.db.Query(ctx, objectCleanupGet)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ObjectCleanupGetRow
	for rows.Next() {
		var i ObjectCleanupGetRow
		if err := rows.Scan(
			&i.ID,
			&i.OrganizationID,
			&i.InstanceNum,
			&i.BucketID,
			&i.ObjectID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
