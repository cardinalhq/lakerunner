// Copyright (C) 2025 CardinalHQ, Inc
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, version 3.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program. If not, see <http://www.gnu.org/licenses/>.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: queryworker.proto

package queryproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	QueryWorker_ProcessPushdown_FullMethodName = "/queryproto.QueryWorker/ProcessPushdown"
	QueryWorker_Health_FullMethodName          = "/queryproto.QueryWorker/Health"
)

// QueryWorkerClient is the client API for QueryWorker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryWorkerClient interface {
	// ProcessPushdown processes a pushdown request and streams back SketchInput results
	ProcessPushdown(ctx context.Context, in *PushDownRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SketchInputResponse], error)
	// Health check endpoint
	Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error)
}

type queryWorkerClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryWorkerClient(cc grpc.ClientConnInterface) QueryWorkerClient {
	return &queryWorkerClient{cc}
}

func (c *queryWorkerClient) ProcessPushdown(ctx context.Context, in *PushDownRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SketchInputResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &QueryWorker_ServiceDesc.Streams[0], QueryWorker_ProcessPushdown_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PushDownRequest, SketchInputResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type QueryWorker_ProcessPushdownClient = grpc.ServerStreamingClient[SketchInputResponse]

func (c *queryWorkerClient) Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, QueryWorker_Health_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryWorkerServer is the server API for QueryWorker service.
// All implementations must embed UnimplementedQueryWorkerServer
// for forward compatibility.
type QueryWorkerServer interface {
	// ProcessPushdown processes a pushdown request and streams back SketchInput results
	ProcessPushdown(*PushDownRequest, grpc.ServerStreamingServer[SketchInputResponse]) error
	// Health check endpoint
	Health(context.Context, *HealthRequest) (*HealthResponse, error)
	mustEmbedUnimplementedQueryWorkerServer()
}

// UnimplementedQueryWorkerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedQueryWorkerServer struct{}

func (UnimplementedQueryWorkerServer) ProcessPushdown(*PushDownRequest, grpc.ServerStreamingServer[SketchInputResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ProcessPushdown not implemented")
}
func (UnimplementedQueryWorkerServer) Health(context.Context, *HealthRequest) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (UnimplementedQueryWorkerServer) mustEmbedUnimplementedQueryWorkerServer() {}
func (UnimplementedQueryWorkerServer) testEmbeddedByValue()                     {}

// UnsafeQueryWorkerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryWorkerServer will
// result in compilation errors.
type UnsafeQueryWorkerServer interface {
	mustEmbedUnimplementedQueryWorkerServer()
}

func RegisterQueryWorkerServer(s grpc.ServiceRegistrar, srv QueryWorkerServer) {
	// If the following call pancis, it indicates UnimplementedQueryWorkerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&QueryWorker_ServiceDesc, srv)
}

func _QueryWorker_ProcessPushdown_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PushDownRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(QueryWorkerServer).ProcessPushdown(m, &grpc.GenericServerStream[PushDownRequest, SketchInputResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type QueryWorker_ProcessPushdownServer = grpc.ServerStreamingServer[SketchInputResponse]

func _QueryWorker_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryWorkerServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryWorker_Health_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryWorkerServer).Health(ctx, req.(*HealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QueryWorker_ServiceDesc is the grpc.ServiceDesc for QueryWorker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QueryWorker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "queryproto.QueryWorker",
	HandlerType: (*QueryWorkerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Health",
			Handler:    _QueryWorker_Health_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ProcessPushdown",
			Handler:       _QueryWorker_ProcessPushdown_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "queryworker.proto",
}
