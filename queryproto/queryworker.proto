// Copyright (C) 2025 CardinalHQ, Inc
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, version 3.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program. If not, see <http://www.gnu.org/licenses/>.

syntax = "proto3";

package queryproto;

option go_package = "github.com/cardinalhq/lakerunner/queryproto";

service QueryWorker {
  // ProcessPushdown processes a pushdown request and streams back SketchInput results
  rpc ProcessPushdown(PushDownRequest) returns (stream SketchInputResponse);
  
  // Health check endpoint
  rpc Health(HealthRequest) returns (HealthResponse);
}

message PushDownRequest {
  string organization_id = 1;
  BaseExpr base_expr = 2;
  int64 start_ts = 3;
  int64 end_ts = 4;
  int64 step_duration_ms = 5; // Duration in milliseconds
  repeated SegmentInfo segments = 6;
}

message BaseExpr {
  string id = 1;
  string metric = 2;
  repeated LabelMatch matchers = 3;
  string range = 4;
  string subquery_step = 5;
  string offset = 6;
  repeated string group_by = 7;
  repeated string without = 8;
}

message LabelMatch {
  string name = 1;
  string value = 2;
  string type = 3; // Matches the type field from promql.LabelMatch
}

message SegmentInfo {
  int32 date_int = 1;
  string hour = 2;
  string segment_id = 3;
  int64 start_ts = 4;
  int64 end_ts = 5;
  string expr_id = 6;
  string dataset = 7;
  string bucket_name = 8;
  string customer_id = 9;
  string collector_id = 10;
  int64 frequency = 11;
}

message SketchInputResponse {
  oneof response {
    SketchInput data = 1;
    ErrorResponse error = 2;
    CompletionResponse done = 3;
  }
}

message SketchInput {
  string expr_id = 1;
  string organization_id = 2;
  int64 timestamp = 3;
  int64 frequency = 4; // in seconds
  SketchTags sketch_tags = 5;
}

message SketchTags {
  // Map of tag key-value pairs
  map<string, string> tags = 1;
}

message ErrorResponse {
  string error = 1;
}

message CompletionResponse {
  string status = 1;
}

message HealthRequest {
  // Empty for now, can be extended
}

message HealthResponse {
  string status = 1;
  int64 timestamp = 2;
  string service = 3;
}