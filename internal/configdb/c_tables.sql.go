// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: c_tables.sql

package configdb

import (
	"context"

	"github.com/google/uuid"
)

const getStorageProfileByCollectorNameUncached = `-- name: GetStorageProfileByCollectorNameUncached :one
SELECT
  sp.cloud_provider AS cloud_provider,
  sp.region AS region,
  sp.role AS role,
  sp.hosted AS hosted,
  sp.bucket AS bucket,
  c.instance_num::SMALLINT AS instance_num,
  c.organization_id::UUID AS organization_id,
  c.external_id::TEXT AS external_id
FROM
  c_storage_profiles sp
  LEFT OUTER JOIN c_collectors c ON c.storage_profile_id = sp.id
WHERE
  c.deleted_at IS NULL
  AND c.organization_id = $1
  AND c.external_id = $2
`

type GetStorageProfileByCollectorNameParams struct {
	OrganizationID uuid.UUID `json:"organization_id"`
	CollectorName  string    `json:"collector_name"`
}

type GetStorageProfileByCollectorNameRow struct {
	CloudProvider  string    `json:"cloud_provider"`
	Region         string    `json:"region"`
	Role           *string   `json:"role"`
	Hosted         bool      `json:"hosted"`
	Bucket         string    `json:"bucket"`
	InstanceNum    int16     `json:"instance_num"`
	OrganizationID uuid.UUID `json:"organization_id"`
	ExternalID     string    `json:"external_id"`
}

func (q *Queries) GetStorageProfileByCollectorNameUncached(ctx context.Context, arg GetStorageProfileByCollectorNameParams) (GetStorageProfileByCollectorNameRow, error) {
	row := q.db.QueryRow(ctx, getStorageProfileByCollectorNameUncached, arg.OrganizationID, arg.CollectorName)
	var i GetStorageProfileByCollectorNameRow
	err := row.Scan(
		&i.CloudProvider,
		&i.Region,
		&i.Role,
		&i.Hosted,
		&i.Bucket,
		&i.InstanceNum,
		&i.OrganizationID,
		&i.ExternalID,
	)
	return i, err
}

const getStorageProfileUncached = `-- name: GetStorageProfileUncached :one
SELECT
  sp.cloud_provider AS cloud_provider,
  sp.region AS region,
  sp.role AS role,
  sp.hosted AS hosted,
  sp.bucket AS bucket,
  c.instance_num::SMALLINT AS instance_num,
  c.organization_id::UUID AS organization_id,
  c.external_id::TEXT AS external_id
FROM
  c_storage_profiles sp
  LEFT OUTER JOIN c_collectors c ON c.storage_profile_id = sp.id
WHERE
  c.deleted_at IS NULL
  AND c.organization_id = $1
  AND c.instance_num = $2
`

type GetStorageProfileParams struct {
	OrganizationID uuid.UUID `json:"organization_id"`
	InstanceNum    int16     `json:"instance_num"`
}

type GetStorageProfileRow struct {
	CloudProvider  string    `json:"cloud_provider"`
	Region         string    `json:"region"`
	Role           *string   `json:"role"`
	Hosted         bool      `json:"hosted"`
	Bucket         string    `json:"bucket"`
	InstanceNum    int16     `json:"instance_num"`
	OrganizationID uuid.UUID `json:"organization_id"`
	ExternalID     string    `json:"external_id"`
}

func (q *Queries) GetStorageProfileUncached(ctx context.Context, arg GetStorageProfileParams) (GetStorageProfileRow, error) {
	row := q.db.QueryRow(ctx, getStorageProfileUncached, arg.OrganizationID, arg.InstanceNum)
	var i GetStorageProfileRow
	err := row.Scan(
		&i.CloudProvider,
		&i.Region,
		&i.Role,
		&i.Hosted,
		&i.Bucket,
		&i.InstanceNum,
		&i.OrganizationID,
		&i.ExternalID,
	)
	return i, err
}
