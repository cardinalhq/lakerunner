// Copyright (C) 2025 CardinalHQ, Inc
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, version 3.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program. If not, see <http://www.gnu.org/licenses/>.

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cardinalhq/lakerunner/lrdb (interfaces: StoreFull)

// Package cmd is a generated GoMock package.
package cmd

import (
	context "context"
	reflect "reflect"
	time "time"

	lrdb "github.com/cardinalhq/lakerunner/lrdb"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	pgtype "github.com/jackc/pgx/v5/pgtype"
)

// MockStoreFull is a mock of StoreFull interface.
type MockStoreFull struct {
	ctrl     *gomock.Controller
	recorder *MockStoreFullMockRecorder
}

// MockStoreFullMockRecorder is the mock recorder for MockStoreFull.
type MockStoreFullMockRecorder struct {
	mock *MockStoreFull
}

// NewMockStoreFull creates a new mock instance.
func NewMockStoreFull(ctrl *gomock.Controller) *MockStoreFull {
	mock := &MockStoreFull{ctrl: ctrl}
	mock.recorder = &MockStoreFullMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStoreFull) EXPECT() *MockStoreFullMockRecorder {
	return m.recorder
}

// BatchDeleteMetricSegs mocks base method.
func (m *MockStoreFull) BatchDeleteMetricSegs(arg0 context.Context, arg1 []lrdb.BatchDeleteMetricSegsParams) *lrdb.BatchDeleteMetricSegsBatchResults {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchDeleteMetricSegs", arg0, arg1)
	ret0, _ := ret[0].(*lrdb.BatchDeleteMetricSegsBatchResults)
	return ret0
}

// BatchDeleteMetricSegs indicates an expected call of BatchDeleteMetricSegs.
func (mr *MockStoreFullMockRecorder) BatchDeleteMetricSegs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDeleteMetricSegs", reflect.TypeOf((*MockStoreFull)(nil).BatchDeleteMetricSegs), arg0, arg1)
}

// BatchInsertMetricSegs mocks base method.
func (m *MockStoreFull) BatchInsertMetricSegs(arg0 context.Context, arg1 []lrdb.BatchInsertMetricSegsParams) *lrdb.BatchInsertMetricSegsBatchResults {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchInsertMetricSegs", arg0, arg1)
	ret0, _ := ret[0].(*lrdb.BatchInsertMetricSegsBatchResults)
	return ret0
}

// BatchInsertMetricSegs indicates an expected call of BatchInsertMetricSegs.
func (mr *MockStoreFullMockRecorder) BatchInsertMetricSegs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchInsertMetricSegs", reflect.TypeOf((*MockStoreFull)(nil).BatchInsertMetricSegs), arg0, arg1)
}

// BatchMarkMetricSegsRolledup mocks base method.
func (m *MockStoreFull) BatchMarkMetricSegsRolledup(arg0 context.Context, arg1 []lrdb.BatchMarkMetricSegsRolledupParams) *lrdb.BatchMarkMetricSegsRolledupBatchResults {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchMarkMetricSegsRolledup", arg0, arg1)
	ret0, _ := ret[0].(*lrdb.BatchMarkMetricSegsRolledupBatchResults)
	return ret0
}

// BatchMarkMetricSegsRolledup indicates an expected call of BatchMarkMetricSegsRolledup.
func (mr *MockStoreFullMockRecorder) BatchMarkMetricSegsRolledup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchMarkMetricSegsRolledup", reflect.TypeOf((*MockStoreFull)(nil).BatchMarkMetricSegsRolledup), arg0, arg1)
}

// BatchUpsertExemplarLogs mocks base method.
func (m *MockStoreFull) BatchUpsertExemplarLogs(arg0 context.Context, arg1 []lrdb.BatchUpsertExemplarLogsParams) *lrdb.BatchUpsertExemplarLogsBatchResults {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchUpsertExemplarLogs", arg0, arg1)
	ret0, _ := ret[0].(*lrdb.BatchUpsertExemplarLogsBatchResults)
	return ret0
}

// BatchUpsertExemplarLogs indicates an expected call of BatchUpsertExemplarLogs.
func (mr *MockStoreFullMockRecorder) BatchUpsertExemplarLogs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchUpsertExemplarLogs", reflect.TypeOf((*MockStoreFull)(nil).BatchUpsertExemplarLogs), arg0, arg1)
}

// BatchUpsertExemplarMetrics mocks base method.
func (m *MockStoreFull) BatchUpsertExemplarMetrics(arg0 context.Context, arg1 []lrdb.BatchUpsertExemplarMetricsParams) *lrdb.BatchUpsertExemplarMetricsBatchResults {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchUpsertExemplarMetrics", arg0, arg1)
	ret0, _ := ret[0].(*lrdb.BatchUpsertExemplarMetricsBatchResults)
	return ret0
}

// BatchUpsertExemplarMetrics indicates an expected call of BatchUpsertExemplarMetrics.
func (mr *MockStoreFullMockRecorder) BatchUpsertExemplarMetrics(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchUpsertExemplarMetrics", reflect.TypeOf((*MockStoreFull)(nil).BatchUpsertExemplarMetrics), arg0, arg1)
}

// BatchUpsertExemplarTraces mocks base method.
func (m *MockStoreFull) BatchUpsertExemplarTraces(arg0 context.Context, arg1 []lrdb.BatchUpsertExemplarTracesParams) *lrdb.BatchUpsertExemplarTracesBatchResults {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchUpsertExemplarTraces", arg0, arg1)
	ret0, _ := ret[0].(*lrdb.BatchUpsertExemplarTracesBatchResults)
	return ret0
}

// BatchUpsertExemplarTraces indicates an expected call of BatchUpsertExemplarTraces.
func (mr *MockStoreFullMockRecorder) BatchUpsertExemplarTraces(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchUpsertExemplarTraces", reflect.TypeOf((*MockStoreFull)(nil).BatchUpsertExemplarTraces), arg0, arg1)
}

// ClaimInqueueWork mocks base method.
func (m *MockStoreFull) ClaimInqueueWork(arg0 context.Context, arg1 lrdb.ClaimInqueueWorkParams) (lrdb.Inqueue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClaimInqueueWork", arg0, arg1)
	ret0, _ := ret[0].(lrdb.Inqueue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClaimInqueueWork indicates an expected call of ClaimInqueueWork.
func (mr *MockStoreFullMockRecorder) ClaimInqueueWork(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClaimInqueueWork", reflect.TypeOf((*MockStoreFull)(nil).ClaimInqueueWork), arg0, arg1)
}

// ClaimInqueueWorkBatch mocks base method.
func (m *MockStoreFull) ClaimInqueueWorkBatch(arg0 context.Context, arg1 lrdb.ClaimInqueueWorkBatchParams) ([]lrdb.ClaimInqueueWorkBatchRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClaimInqueueWorkBatch", arg0, arg1)
	ret0, _ := ret[0].([]lrdb.ClaimInqueueWorkBatchRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClaimInqueueWorkBatch indicates an expected call of ClaimInqueueWorkBatch.
func (mr *MockStoreFullMockRecorder) ClaimInqueueWorkBatch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClaimInqueueWorkBatch", reflect.TypeOf((*MockStoreFull)(nil).ClaimInqueueWorkBatch), arg0, arg1)
}

// CleanupInqueueWork mocks base method.
func (m *MockStoreFull) CleanupInqueueWork(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanupInqueueWork", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CleanupInqueueWork indicates an expected call of CleanupInqueueWork.
func (mr *MockStoreFullMockRecorder) CleanupInqueueWork(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanupInqueueWork", reflect.TypeOf((*MockStoreFull)(nil).CleanupInqueueWork), arg0)
}

// CompactLogSegments mocks base method.
func (m *MockStoreFull) CompactLogSegments(arg0 context.Context, arg1 lrdb.CompactLogSegmentsParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompactLogSegments", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CompactLogSegments indicates an expected call of CompactLogSegments.
func (mr *MockStoreFullMockRecorder) CompactLogSegments(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompactLogSegments", reflect.TypeOf((*MockStoreFull)(nil).CompactLogSegments), arg0, arg1)
}

// CompactTraceSegments mocks base method.
func (m *MockStoreFull) CompactTraceSegments(arg0 context.Context, arg1 lrdb.CompactTraceSegmentsParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompactTraceSegments", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CompactTraceSegments indicates an expected call of CompactTraceSegments.
func (mr *MockStoreFullMockRecorder) CompactTraceSegments(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompactTraceSegments", reflect.TypeOf((*MockStoreFull)(nil).CompactTraceSegments), arg0, arg1)
}

// DeleteInqueueWork mocks base method.
func (m *MockStoreFull) DeleteInqueueWork(arg0 context.Context, arg1 lrdb.DeleteInqueueWorkParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInqueueWork", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteInqueueWork indicates an expected call of DeleteInqueueWork.
func (mr *MockStoreFullMockRecorder) DeleteInqueueWork(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInqueueWork", reflect.TypeOf((*MockStoreFull)(nil).DeleteInqueueWork), arg0, arg1)
}

// GetExemplarLogsByFingerprint mocks base method.
func (m *MockStoreFull) GetExemplarLogsByFingerprint(arg0 context.Context, arg1 lrdb.GetExemplarLogsByFingerprintParams) (lrdb.ExemplarLog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExemplarLogsByFingerprint", arg0, arg1)
	ret0, _ := ret[0].(lrdb.ExemplarLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExemplarLogsByFingerprint indicates an expected call of GetExemplarLogsByFingerprint.
func (mr *MockStoreFullMockRecorder) GetExemplarLogsByFingerprint(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExemplarLogsByFingerprint", reflect.TypeOf((*MockStoreFull)(nil).GetExemplarLogsByFingerprint), arg0, arg1)
}

// GetExemplarLogsByService mocks base method.
func (m *MockStoreFull) GetExemplarLogsByService(arg0 context.Context, arg1 lrdb.GetExemplarLogsByServiceParams) ([]lrdb.ExemplarLog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExemplarLogsByService", arg0, arg1)
	ret0, _ := ret[0].([]lrdb.ExemplarLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExemplarLogsByService indicates an expected call of GetExemplarLogsByService.
func (mr *MockStoreFullMockRecorder) GetExemplarLogsByService(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExemplarLogsByService", reflect.TypeOf((*MockStoreFull)(nil).GetExemplarLogsByService), arg0, arg1)
}

// GetExemplarLogsCreatedAfter mocks base method.
func (m *MockStoreFull) GetExemplarLogsCreatedAfter(arg0 context.Context, arg1 time.Time) ([]lrdb.ExemplarLog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExemplarLogsCreatedAfter", arg0, arg1)
	ret0, _ := ret[0].([]lrdb.ExemplarLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExemplarLogsCreatedAfter indicates an expected call of GetExemplarLogsCreatedAfter.
func (mr *MockStoreFullMockRecorder) GetExemplarLogsCreatedAfter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExemplarLogsCreatedAfter", reflect.TypeOf((*MockStoreFull)(nil).GetExemplarLogsCreatedAfter), arg0, arg1)
}

// GetExemplarMetricsByService mocks base method.
func (m *MockStoreFull) GetExemplarMetricsByService(arg0 context.Context, arg1 lrdb.GetExemplarMetricsByServiceParams) ([]lrdb.ExemplarMetric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExemplarMetricsByService", arg0, arg1)
	ret0, _ := ret[0].([]lrdb.ExemplarMetric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExemplarMetricsByService indicates an expected call of GetExemplarMetricsByService.
func (mr *MockStoreFullMockRecorder) GetExemplarMetricsByService(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExemplarMetricsByService", reflect.TypeOf((*MockStoreFull)(nil).GetExemplarMetricsByService), arg0, arg1)
}

// GetExemplarMetricsCreatedAfter mocks base method.
func (m *MockStoreFull) GetExemplarMetricsCreatedAfter(arg0 context.Context, arg1 time.Time) ([]lrdb.ExemplarMetric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExemplarMetricsCreatedAfter", arg0, arg1)
	ret0, _ := ret[0].([]lrdb.ExemplarMetric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExemplarMetricsCreatedAfter indicates an expected call of GetExemplarMetricsCreatedAfter.
func (mr *MockStoreFullMockRecorder) GetExemplarMetricsCreatedAfter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExemplarMetricsCreatedAfter", reflect.TypeOf((*MockStoreFull)(nil).GetExemplarMetricsCreatedAfter), arg0, arg1)
}

// GetExemplarTracesByFingerprint mocks base method.
func (m *MockStoreFull) GetExemplarTracesByFingerprint(arg0 context.Context, arg1 lrdb.GetExemplarTracesByFingerprintParams) (lrdb.ExemplarTrace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExemplarTracesByFingerprint", arg0, arg1)
	ret0, _ := ret[0].(lrdb.ExemplarTrace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExemplarTracesByFingerprint indicates an expected call of GetExemplarTracesByFingerprint.
func (mr *MockStoreFullMockRecorder) GetExemplarTracesByFingerprint(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExemplarTracesByFingerprint", reflect.TypeOf((*MockStoreFull)(nil).GetExemplarTracesByFingerprint), arg0, arg1)
}

// GetExemplarTracesByService mocks base method.
func (m *MockStoreFull) GetExemplarTracesByService(arg0 context.Context, arg1 lrdb.GetExemplarTracesByServiceParams) ([]lrdb.ExemplarTrace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExemplarTracesByService", arg0, arg1)
	ret0, _ := ret[0].([]lrdb.ExemplarTrace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExemplarTracesByService indicates an expected call of GetExemplarTracesByService.
func (mr *MockStoreFullMockRecorder) GetExemplarTracesByService(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExemplarTracesByService", reflect.TypeOf((*MockStoreFull)(nil).GetExemplarTracesByService), arg0, arg1)
}

// GetExemplarTracesCreatedAfter mocks base method.
func (m *MockStoreFull) GetExemplarTracesCreatedAfter(arg0 context.Context, arg1 time.Time) ([]lrdb.ExemplarTrace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExemplarTracesCreatedAfter", arg0, arg1)
	ret0, _ := ret[0].([]lrdb.ExemplarTrace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExemplarTracesCreatedAfter indicates an expected call of GetExemplarTracesCreatedAfter.
func (mr *MockStoreFullMockRecorder) GetExemplarTracesCreatedAfter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExemplarTracesCreatedAfter", reflect.TypeOf((*MockStoreFull)(nil).GetExemplarTracesCreatedAfter), arg0, arg1)
}

// GetLogSegmentsForCompaction mocks base method.
func (m *MockStoreFull) GetLogSegmentsForCompaction(arg0 context.Context, arg1 lrdb.GetLogSegmentsForCompactionParams) ([]lrdb.GetLogSegmentsForCompactionRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogSegmentsForCompaction", arg0, arg1)
	ret0, _ := ret[0].([]lrdb.GetLogSegmentsForCompactionRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLogSegmentsForCompaction indicates an expected call of GetLogSegmentsForCompaction.
func (mr *MockStoreFullMockRecorder) GetLogSegmentsForCompaction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogSegmentsForCompaction", reflect.TypeOf((*MockStoreFull)(nil).GetLogSegmentsForCompaction), arg0, arg1)
}

// GetMetricSegsForCompaction mocks base method.
func (m *MockStoreFull) GetMetricSegsForCompaction(arg0 context.Context, arg1 lrdb.GetMetricSegsForCompactionParams) ([]lrdb.MetricSeg, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetricSegsForCompaction", arg0, arg1)
	ret0, _ := ret[0].([]lrdb.MetricSeg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetricSegsForCompaction indicates an expected call of GetMetricSegsForCompaction.
func (mr *MockStoreFullMockRecorder) GetMetricSegsForCompaction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetricSegsForCompaction", reflect.TypeOf((*MockStoreFull)(nil).GetMetricSegsForCompaction), arg0, arg1)
}

// GetMetricSegsForRollup mocks base method.
func (m *MockStoreFull) GetMetricSegsForRollup(arg0 context.Context, arg1 lrdb.GetMetricSegsForRollupParams) ([]lrdb.MetricSeg, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetricSegsForRollup", arg0, arg1)
	ret0, _ := ret[0].([]lrdb.MetricSeg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetricSegsForRollup indicates an expected call of GetMetricSegsForRollup.
func (mr *MockStoreFullMockRecorder) GetMetricSegsForRollup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetricSegsForRollup", reflect.TypeOf((*MockStoreFull)(nil).GetMetricSegsForRollup), arg0, arg1)
}

// GetSpanInfoByFingerprint mocks base method.
func (m *MockStoreFull) GetSpanInfoByFingerprint(arg0 context.Context, arg1 lrdb.GetSpanInfoByFingerprintParams) (lrdb.GetSpanInfoByFingerprintRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpanInfoByFingerprint", arg0, arg1)
	ret0, _ := ret[0].(lrdb.GetSpanInfoByFingerprintRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpanInfoByFingerprint indicates an expected call of GetSpanInfoByFingerprint.
func (mr *MockStoreFullMockRecorder) GetSpanInfoByFingerprint(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpanInfoByFingerprint", reflect.TypeOf((*MockStoreFull)(nil).GetSpanInfoByFingerprint), arg0, arg1)
}

// GetTraceSegmentsForCompaction mocks base method.
func (m *MockStoreFull) GetTraceSegmentsForCompaction(arg0 context.Context, arg1 lrdb.GetTraceSegmentsForCompactionParams) ([]lrdb.GetTraceSegmentsForCompactionRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTraceSegmentsForCompaction", arg0, arg1)
	ret0, _ := ret[0].([]lrdb.GetTraceSegmentsForCompactionRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTraceSegmentsForCompaction indicates an expected call of GetTraceSegmentsForCompaction.
func (mr *MockStoreFullMockRecorder) GetTraceSegmentsForCompaction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTraceSegmentsForCompaction", reflect.TypeOf((*MockStoreFull)(nil).GetTraceSegmentsForCompaction), arg0, arg1)
}

// InqueueJournalDelete mocks base method.
func (m *MockStoreFull) InqueueJournalDelete(arg0 context.Context, arg1 lrdb.InqueueJournalDeleteParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InqueueJournalDelete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InqueueJournalDelete indicates an expected call of InqueueJournalDelete.
func (mr *MockStoreFullMockRecorder) InqueueJournalDelete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InqueueJournalDelete", reflect.TypeOf((*MockStoreFull)(nil).InqueueJournalDelete), arg0, arg1)
}

// InqueueJournalUpsert mocks base method.
func (m *MockStoreFull) InqueueJournalUpsert(arg0 context.Context, arg1 lrdb.InqueueJournalUpsertParams) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InqueueJournalUpsert", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InqueueJournalUpsert indicates an expected call of InqueueJournalUpsert.
func (mr *MockStoreFullMockRecorder) InqueueJournalUpsert(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InqueueJournalUpsert", reflect.TypeOf((*MockStoreFull)(nil).InqueueJournalUpsert), arg0, arg1)
}

// InqueueSummary mocks base method.
func (m *MockStoreFull) InqueueSummary(arg0 context.Context) ([]lrdb.InqueueSummaryRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InqueueSummary", arg0)
	ret0, _ := ret[0].([]lrdb.InqueueSummaryRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InqueueSummary indicates an expected call of InqueueSummary.
func (mr *MockStoreFullMockRecorder) InqueueSummary(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InqueueSummary", reflect.TypeOf((*MockStoreFull)(nil).InqueueSummary), arg0)
}

// InsertLogSegment mocks base method.
func (m *MockStoreFull) InsertLogSegment(arg0 context.Context, arg1 lrdb.InsertLogSegmentParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertLogSegment", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertLogSegment indicates an expected call of InsertLogSegment.
func (mr *MockStoreFullMockRecorder) InsertLogSegment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertLogSegment", reflect.TypeOf((*MockStoreFull)(nil).InsertLogSegment), arg0, arg1)
}

// InsertLogSegmentDirect mocks base method.
func (m *MockStoreFull) InsertLogSegmentDirect(arg0 context.Context, arg1 lrdb.InsertLogSegmentParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertLogSegmentDirect", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertLogSegmentDirect indicates an expected call of InsertLogSegmentDirect.
func (mr *MockStoreFullMockRecorder) InsertLogSegmentDirect(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertLogSegmentDirect", reflect.TypeOf((*MockStoreFull)(nil).InsertLogSegmentDirect), arg0, arg1)
}

// InsertMetricSegment mocks base method.
func (m *MockStoreFull) InsertMetricSegment(arg0 context.Context, arg1 lrdb.InsertMetricSegmentParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertMetricSegment", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertMetricSegment indicates an expected call of InsertMetricSegment.
func (mr *MockStoreFullMockRecorder) InsertMetricSegment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertMetricSegment", reflect.TypeOf((*MockStoreFull)(nil).InsertMetricSegment), arg0, arg1)
}

// InsertMetricSegmentDirect mocks base method.
func (m *MockStoreFull) InsertMetricSegmentDirect(arg0 context.Context, arg1 lrdb.InsertMetricSegmentParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertMetricSegmentDirect", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertMetricSegmentDirect indicates an expected call of InsertMetricSegmentDirect.
func (mr *MockStoreFullMockRecorder) InsertMetricSegmentDirect(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertMetricSegmentDirect", reflect.TypeOf((*MockStoreFull)(nil).InsertMetricSegmentDirect), arg0, arg1)
}

// InsertTraceSegment mocks base method.
func (m *MockStoreFull) InsertTraceSegment(arg0 context.Context, arg1 lrdb.InsertTraceSegmentDirectParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertTraceSegment", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertTraceSegment indicates an expected call of InsertTraceSegment.
func (mr *MockStoreFullMockRecorder) InsertTraceSegment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertTraceSegment", reflect.TypeOf((*MockStoreFull)(nil).InsertTraceSegment), arg0, arg1)
}

// InsertTraceSegmentDirect mocks base method.
func (m *MockStoreFull) InsertTraceSegmentDirect(arg0 context.Context, arg1 lrdb.InsertTraceSegmentDirectParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertTraceSegmentDirect", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertTraceSegmentDirect indicates an expected call of InsertTraceSegmentDirect.
func (mr *MockStoreFullMockRecorder) InsertTraceSegmentDirect(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertTraceSegmentDirect", reflect.TypeOf((*MockStoreFull)(nil).InsertTraceSegmentDirect), arg0, arg1)
}

// ListSegmentsForQuery mocks base method.
func (m *MockStoreFull) ListSegmentsForQuery(arg0 context.Context, arg1 lrdb.ListSegmentsForQueryParams) ([]lrdb.ListSegmentsForQueryRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSegmentsForQuery", arg0, arg1)
	ret0, _ := ret[0].([]lrdb.ListSegmentsForQueryRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSegmentsForQuery indicates an expected call of ListSegmentsForQuery.
func (mr *MockStoreFullMockRecorder) ListSegmentsForQuery(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSegmentsForQuery", reflect.TypeOf((*MockStoreFull)(nil).ListSegmentsForQuery), arg0, arg1)
}

// LogSegEstimator mocks base method.
func (m *MockStoreFull) LogSegEstimator(arg0 context.Context, arg1 lrdb.LogSegEstimatorParams) ([]lrdb.LogSegEstimatorRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogSegEstimator", arg0, arg1)
	ret0, _ := ret[0].([]lrdb.LogSegEstimatorRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LogSegEstimator indicates an expected call of LogSegEstimator.
func (mr *MockStoreFullMockRecorder) LogSegEstimator(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogSegEstimator", reflect.TypeOf((*MockStoreFull)(nil).LogSegEstimator), arg0, arg1)
}

// MetricSegEstimator mocks base method.
func (m *MockStoreFull) MetricSegEstimator(arg0 context.Context, arg1 lrdb.MetricSegEstimatorParams) ([]lrdb.MetricSegEstimatorRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MetricSegEstimator", arg0, arg1)
	ret0, _ := ret[0].([]lrdb.MetricSegEstimatorRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MetricSegEstimator indicates an expected call of MetricSegEstimator.
func (mr *MockStoreFullMockRecorder) MetricSegEstimator(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MetricSegEstimator", reflect.TypeOf((*MockStoreFull)(nil).MetricSegEstimator), arg0, arg1)
}

// ObjectCleanupAdd mocks base method.
func (m *MockStoreFull) ObjectCleanupAdd(arg0 context.Context, arg1 lrdb.ObjectCleanupAddParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ObjectCleanupAdd", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ObjectCleanupAdd indicates an expected call of ObjectCleanupAdd.
func (mr *MockStoreFullMockRecorder) ObjectCleanupAdd(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObjectCleanupAdd", reflect.TypeOf((*MockStoreFull)(nil).ObjectCleanupAdd), arg0, arg1)
}

// ObjectCleanupBucketSummary mocks base method.
func (m *MockStoreFull) ObjectCleanupBucketSummary(arg0 context.Context) ([]lrdb.ObjectCleanupBucketSummaryRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ObjectCleanupBucketSummary", arg0)
	ret0, _ := ret[0].([]lrdb.ObjectCleanupBucketSummaryRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ObjectCleanupBucketSummary indicates an expected call of ObjectCleanupBucketSummary.
func (mr *MockStoreFullMockRecorder) ObjectCleanupBucketSummary(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObjectCleanupBucketSummary", reflect.TypeOf((*MockStoreFull)(nil).ObjectCleanupBucketSummary), arg0)
}

// ObjectCleanupComplete mocks base method.
func (m *MockStoreFull) ObjectCleanupComplete(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ObjectCleanupComplete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ObjectCleanupComplete indicates an expected call of ObjectCleanupComplete.
func (mr *MockStoreFullMockRecorder) ObjectCleanupComplete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObjectCleanupComplete", reflect.TypeOf((*MockStoreFull)(nil).ObjectCleanupComplete), arg0, arg1)
}

// ObjectCleanupFail mocks base method.
func (m *MockStoreFull) ObjectCleanupFail(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ObjectCleanupFail", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ObjectCleanupFail indicates an expected call of ObjectCleanupFail.
func (mr *MockStoreFullMockRecorder) ObjectCleanupFail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObjectCleanupFail", reflect.TypeOf((*MockStoreFull)(nil).ObjectCleanupFail), arg0, arg1)
}

// ObjectCleanupGet mocks base method.
func (m *MockStoreFull) ObjectCleanupGet(arg0 context.Context, arg1 int32) ([]lrdb.ObjectCleanupGetRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ObjectCleanupGet", arg0, arg1)
	ret0, _ := ret[0].([]lrdb.ObjectCleanupGetRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ObjectCleanupGet indicates an expected call of ObjectCleanupGet.
func (mr *MockStoreFullMockRecorder) ObjectCleanupGet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObjectCleanupGet", reflect.TypeOf((*MockStoreFull)(nil).ObjectCleanupGet), arg0, arg1)
}

// PutInqueueWork mocks base method.
func (m *MockStoreFull) PutInqueueWork(arg0 context.Context, arg1 lrdb.PutInqueueWorkParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutInqueueWork", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutInqueueWork indicates an expected call of PutInqueueWork.
func (mr *MockStoreFullMockRecorder) PutInqueueWork(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutInqueueWork", reflect.TypeOf((*MockStoreFull)(nil).PutInqueueWork), arg0, arg1)
}

// ReleaseInqueueWork mocks base method.
func (m *MockStoreFull) ReleaseInqueueWork(arg0 context.Context, arg1 lrdb.ReleaseInqueueWorkParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReleaseInqueueWork", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReleaseInqueueWork indicates an expected call of ReleaseInqueueWork.
func (mr *MockStoreFullMockRecorder) ReleaseInqueueWork(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseInqueueWork", reflect.TypeOf((*MockStoreFull)(nil).ReleaseInqueueWork), arg0, arg1)
}

// ReplaceMetricSegs mocks base method.
func (m *MockStoreFull) ReplaceMetricSegs(arg0 context.Context, arg1 lrdb.ReplaceMetricSegsParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplaceMetricSegs", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReplaceMetricSegs indicates an expected call of ReplaceMetricSegs.
func (mr *MockStoreFullMockRecorder) ReplaceMetricSegs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceMetricSegs", reflect.TypeOf((*MockStoreFull)(nil).ReplaceMetricSegs), arg0, arg1)
}

// SignalLockCleanup mocks base method.
func (m *MockStoreFull) SignalLockCleanup(arg0 context.Context) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignalLockCleanup", arg0)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignalLockCleanup indicates an expected call of SignalLockCleanup.
func (mr *MockStoreFullMockRecorder) SignalLockCleanup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignalLockCleanup", reflect.TypeOf((*MockStoreFull)(nil).SignalLockCleanup), arg0)
}

// TouchInqueueWork mocks base method.
func (m *MockStoreFull) TouchInqueueWork(arg0 context.Context, arg1 lrdb.TouchInqueueWorkParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TouchInqueueWork", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// TouchInqueueWork indicates an expected call of TouchInqueueWork.
func (mr *MockStoreFullMockRecorder) TouchInqueueWork(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TouchInqueueWork", reflect.TypeOf((*MockStoreFull)(nil).TouchInqueueWork), arg0, arg1)
}

// UpsertServiceIdentifier mocks base method.
func (m *MockStoreFull) UpsertServiceIdentifier(arg0 context.Context, arg1 lrdb.UpsertServiceIdentifierParams) (lrdb.UpsertServiceIdentifierRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertServiceIdentifier", arg0, arg1)
	ret0, _ := ret[0].(lrdb.UpsertServiceIdentifierRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertServiceIdentifier indicates an expected call of UpsertServiceIdentifier.
func (mr *MockStoreFullMockRecorder) UpsertServiceIdentifier(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertServiceIdentifier", reflect.TypeOf((*MockStoreFull)(nil).UpsertServiceIdentifier), arg0, arg1)
}

// WorkQueueAdd mocks base method.
func (m *MockStoreFull) WorkQueueAdd(arg0 context.Context, arg1 lrdb.WorkQueueAddParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkQueueAdd", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WorkQueueAdd indicates an expected call of WorkQueueAdd.
func (mr *MockStoreFullMockRecorder) WorkQueueAdd(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkQueueAdd", reflect.TypeOf((*MockStoreFull)(nil).WorkQueueAdd), arg0, arg1)
}

// WorkQueueAddDirect mocks base method.
func (m *MockStoreFull) WorkQueueAddDirect(arg0 context.Context, arg1 lrdb.WorkQueueAddParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkQueueAddDirect", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WorkQueueAddDirect indicates an expected call of WorkQueueAddDirect.
func (mr *MockStoreFullMockRecorder) WorkQueueAddDirect(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkQueueAddDirect", reflect.TypeOf((*MockStoreFull)(nil).WorkQueueAddDirect), arg0, arg1)
}

// WorkQueueClaim mocks base method.
func (m *MockStoreFull) WorkQueueClaim(arg0 context.Context, arg1 lrdb.WorkQueueClaimParams) (lrdb.WorkQueueClaimRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkQueueClaim", arg0, arg1)
	ret0, _ := ret[0].(lrdb.WorkQueueClaimRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkQueueClaim indicates an expected call of WorkQueueClaim.
func (mr *MockStoreFullMockRecorder) WorkQueueClaim(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkQueueClaim", reflect.TypeOf((*MockStoreFull)(nil).WorkQueueClaim), arg0, arg1)
}

// WorkQueueClaimDirect mocks base method.
func (m *MockStoreFull) WorkQueueClaimDirect(arg0 context.Context, arg1 lrdb.WorkQueueClaimParams) (lrdb.WorkQueueClaimRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkQueueClaimDirect", arg0, arg1)
	ret0, _ := ret[0].(lrdb.WorkQueueClaimRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkQueueClaimDirect indicates an expected call of WorkQueueClaimDirect.
func (mr *MockStoreFullMockRecorder) WorkQueueClaimDirect(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkQueueClaimDirect", reflect.TypeOf((*MockStoreFull)(nil).WorkQueueClaimDirect), arg0, arg1)
}

// WorkQueueCleanup mocks base method.
func (m *MockStoreFull) WorkQueueCleanup(arg0 context.Context, arg1 pgtype.Interval) ([]lrdb.WorkQueueCleanupRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkQueueCleanup", arg0, arg1)
	ret0, _ := ret[0].([]lrdb.WorkQueueCleanupRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkQueueCleanup indicates an expected call of WorkQueueCleanup.
func (mr *MockStoreFullMockRecorder) WorkQueueCleanup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkQueueCleanup", reflect.TypeOf((*MockStoreFull)(nil).WorkQueueCleanup), arg0, arg1)
}

// WorkQueueCleanupDirect mocks base method.
func (m *MockStoreFull) WorkQueueCleanupDirect(arg0 context.Context, arg1 pgtype.Interval) ([]lrdb.WorkQueueCleanupRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkQueueCleanupDirect", arg0, arg1)
	ret0, _ := ret[0].([]lrdb.WorkQueueCleanupRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkQueueCleanupDirect indicates an expected call of WorkQueueCleanupDirect.
func (mr *MockStoreFullMockRecorder) WorkQueueCleanupDirect(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkQueueCleanupDirect", reflect.TypeOf((*MockStoreFull)(nil).WorkQueueCleanupDirect), arg0, arg1)
}

// WorkQueueComplete mocks base method.
func (m *MockStoreFull) WorkQueueComplete(arg0 context.Context, arg1 lrdb.WorkQueueCompleteParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkQueueComplete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WorkQueueComplete indicates an expected call of WorkQueueComplete.
func (mr *MockStoreFullMockRecorder) WorkQueueComplete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkQueueComplete", reflect.TypeOf((*MockStoreFull)(nil).WorkQueueComplete), arg0, arg1)
}

// WorkQueueCompleteDirect mocks base method.
func (m *MockStoreFull) WorkQueueCompleteDirect(arg0 context.Context, arg1 lrdb.WorkQueueCompleteParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkQueueCompleteDirect", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WorkQueueCompleteDirect indicates an expected call of WorkQueueCompleteDirect.
func (mr *MockStoreFullMockRecorder) WorkQueueCompleteDirect(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkQueueCompleteDirect", reflect.TypeOf((*MockStoreFull)(nil).WorkQueueCompleteDirect), arg0, arg1)
}

// WorkQueueDelete mocks base method.
func (m *MockStoreFull) WorkQueueDelete(arg0 context.Context, arg1 lrdb.WorkQueueDeleteParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkQueueDelete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WorkQueueDelete indicates an expected call of WorkQueueDelete.
func (mr *MockStoreFullMockRecorder) WorkQueueDelete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkQueueDelete", reflect.TypeOf((*MockStoreFull)(nil).WorkQueueDelete), arg0, arg1)
}

// WorkQueueDeleteDirect mocks base method.
func (m *MockStoreFull) WorkQueueDeleteDirect(arg0 context.Context, arg1 lrdb.WorkQueueDeleteParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkQueueDeleteDirect", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WorkQueueDeleteDirect indicates an expected call of WorkQueueDeleteDirect.
func (mr *MockStoreFullMockRecorder) WorkQueueDeleteDirect(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkQueueDeleteDirect", reflect.TypeOf((*MockStoreFull)(nil).WorkQueueDeleteDirect), arg0, arg1)
}

// WorkQueueExtendedStatus mocks base method.
func (m *MockStoreFull) WorkQueueExtendedStatus(arg0 context.Context) ([]lrdb.WorkQueueExtendedStatusRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkQueueExtendedStatus", arg0)
	ret0, _ := ret[0].([]lrdb.WorkQueueExtendedStatusRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkQueueExtendedStatus indicates an expected call of WorkQueueExtendedStatus.
func (mr *MockStoreFullMockRecorder) WorkQueueExtendedStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkQueueExtendedStatus", reflect.TypeOf((*MockStoreFull)(nil).WorkQueueExtendedStatus), arg0)
}

// WorkQueueFail mocks base method.
func (m *MockStoreFull) WorkQueueFail(arg0 context.Context, arg1 lrdb.WorkQueueFailParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkQueueFail", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WorkQueueFail indicates an expected call of WorkQueueFail.
func (mr *MockStoreFullMockRecorder) WorkQueueFail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkQueueFail", reflect.TypeOf((*MockStoreFull)(nil).WorkQueueFail), arg0, arg1)
}

// WorkQueueFailDirect mocks base method.
func (m *MockStoreFull) WorkQueueFailDirect(arg0 context.Context, arg1 lrdb.WorkQueueFailParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkQueueFailDirect", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WorkQueueFailDirect indicates an expected call of WorkQueueFailDirect.
func (mr *MockStoreFullMockRecorder) WorkQueueFailDirect(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkQueueFailDirect", reflect.TypeOf((*MockStoreFull)(nil).WorkQueueFailDirect), arg0, arg1)
}

// WorkQueueGC mocks base method.
func (m *MockStoreFull) WorkQueueGC(arg0 context.Context, arg1 lrdb.WorkQueueGCParams) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkQueueGC", arg0, arg1)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkQueueGC indicates an expected call of WorkQueueGC.
func (mr *MockStoreFullMockRecorder) WorkQueueGC(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkQueueGC", reflect.TypeOf((*MockStoreFull)(nil).WorkQueueGC), arg0, arg1)
}

// WorkQueueGlobalLock mocks base method.
func (m *MockStoreFull) WorkQueueGlobalLock(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkQueueGlobalLock", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WorkQueueGlobalLock indicates an expected call of WorkQueueGlobalLock.
func (mr *MockStoreFullMockRecorder) WorkQueueGlobalLock(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkQueueGlobalLock", reflect.TypeOf((*MockStoreFull)(nil).WorkQueueGlobalLock), arg0)
}

// WorkQueueHeartbeat mocks base method.
func (m *MockStoreFull) WorkQueueHeartbeat(arg0 context.Context, arg1 lrdb.WorkQueueHeartbeatParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkQueueHeartbeat", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WorkQueueHeartbeat indicates an expected call of WorkQueueHeartbeat.
func (mr *MockStoreFullMockRecorder) WorkQueueHeartbeat(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkQueueHeartbeat", reflect.TypeOf((*MockStoreFull)(nil).WorkQueueHeartbeat), arg0, arg1)
}

// WorkQueueHeartbeatDirect mocks base method.
func (m *MockStoreFull) WorkQueueHeartbeatDirect(arg0 context.Context, arg1 lrdb.WorkQueueHeartbeatParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkQueueHeartbeatDirect", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WorkQueueHeartbeatDirect indicates an expected call of WorkQueueHeartbeatDirect.
func (mr *MockStoreFullMockRecorder) WorkQueueHeartbeatDirect(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkQueueHeartbeatDirect", reflect.TypeOf((*MockStoreFull)(nil).WorkQueueHeartbeatDirect), arg0, arg1)
}

// WorkQueueOrphanedSignalLockCleanup mocks base method.
func (m *MockStoreFull) WorkQueueOrphanedSignalLockCleanup(arg0 context.Context, arg1 int32) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkQueueOrphanedSignalLockCleanup", arg0, arg1)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkQueueOrphanedSignalLockCleanup indicates an expected call of WorkQueueOrphanedSignalLockCleanup.
func (mr *MockStoreFullMockRecorder) WorkQueueOrphanedSignalLockCleanup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkQueueOrphanedSignalLockCleanup", reflect.TypeOf((*MockStoreFull)(nil).WorkQueueOrphanedSignalLockCleanup), arg0, arg1)
}

// WorkQueueSummary mocks base method.
func (m *MockStoreFull) WorkQueueSummary(arg0 context.Context) ([]lrdb.WorkQueueSummaryRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkQueueSummary", arg0)
	ret0, _ := ret[0].([]lrdb.WorkQueueSummaryRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkQueueSummary indicates an expected call of WorkQueueSummary.
func (mr *MockStoreFullMockRecorder) WorkQueueSummary(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkQueueSummary", reflect.TypeOf((*MockStoreFull)(nil).WorkQueueSummary), arg0)
}
