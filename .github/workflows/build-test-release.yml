name: Build Test Release

on:
  push:
    branches-ignore:
      - main
    tags-ignore:
      - 'v[0-9]+.[0-9]+.[0-9]+'

permissions:
  contents: write
  id-token: write
  packages: write
  pull-requests: write

jobs:
  check-pr:
    runs-on: ubuntu-latest
    outputs:
      has-pr: ${{ steps.pr.outputs.has-pr }}
    steps:
      - uses: actions/checkout@v5
      - name: Check for PR
        id: pr
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          sleep 20 # wait for GitHub to register the PR
          if gh pr list --head "$GITHUB_REF_NAME" --state open --json number | jq -e '. | length > 0' > /dev/null; then
            echo "has-pr=true" >> $GITHUB_OUTPUT
          else
            echo "has-pr=false" >> $GITHUB_OUTPUT
          fi

  partials:
    needs: check-pr
    if: needs.check-pr.outputs.has-pr == 'true'
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: linux_amd64
            label: ubuntu-22.04
            cache_path: dist/linux_amd64
          - name: linux_arm64
            label: ubuntu-22.04-arm
            cache_path: dist/linux_arm64
    runs-on: ${{ matrix.label }}
    env:
      DOCKER_CLI_EXPERIMENTAL: "enabled"
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          audience: sts.amazonaws.com
          role-to-assume: arn:aws:iam::${{ secrets.ECR_ACCOUNT_ID }}:role/${{ secrets.ECR_ROLE_NAME }}
          aws-region: ${{ secrets.ECR_REGISTRY_REGION }}
          role-session-name: GitHubActions

      - name: Login to PUBLIC Amazon ECR
        env:
          AWS_REGION: us-east-1
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: public

      - uses: actions/setup-go@v5
        with:
          go-version: stable

      - shell: bash
        run: |
          BRANCH=$(echo "$GITHUB_REF_NAME" | tr '/' '-')
          echo "BRANCH=$BRANCH" >> $GITHUB_ENV
          sha_short=${GITHUB_SHA::8}
          echo "sha_short=$sha_short" >> $GITHUB_ENV

          # Get PR number for better tag naming
          PR_NUMBER=$(gh pr list --head "$GITHUB_REF_NAME" --state open --json number --jq '.[0].number')
          if [ -n "$PR_NUMBER" ] && [ "$PR_NUMBER" != "null" ]; then
            echo "GORELEASER_CURRENT_TAG=v0.0.0-pr$PR_NUMBER-$sha_short" >> $GITHUB_ENV
          else
            echo "GORELEASER_CURRENT_TAG=v0.0.0-$BRANCH-$sha_short" >> $GITHUB_ENV
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/cache@v4
        with:
          path: ${{ matrix.cache_path }}
          key: ${{ matrix.name }}-${{ env.sha_short }}

      - shell: bash
        run: make clean

      - name: Build custom build environment
        run: docker build -f Dockerfile.build -t lakerunner-build .

      - name: Run GoReleaser Pro in custom container
        run: |
          docker run --rm \
            -v $PWD:/workspace \
            -v $PWD/.git:/workspace/.git \
            -w /workspace \
            -e GORELEASER_KEY="${{ secrets.GORELEASER_KEY }}" \
            -e GORELEASER_CURRENT_TAG="${GORELEASER_CURRENT_TAG}" \
            lakerunner-build \
            goreleaser release --clean --split --config .goreleaser.test-release.yaml

      - shell: bash
        run: ls -lR dist

  merge:
    needs: [check-pr, partials]
    if: needs.check-pr.outputs.has-pr == 'true'
    runs-on: ubuntu-22.04
    env:
      DOCKER_CLI_EXPERIMENTAL: "enabled"
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          audience: sts.amazonaws.com
          role-to-assume: arn:aws:iam::${{ secrets.ECR_ACCOUNT_ID }}:role/${{ secrets.ECR_ROLE_NAME }}
          aws-region: ${{ secrets.ECR_REGISTRY_REGION }}
          role-session-name: GitHubActions

      - name: Login to PUBLIC Amazon ECR
        env:
          AWS_REGION: us-east-1
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: public

      - shell: bash
        run: |
          BRANCH=$(echo "$GITHUB_REF_NAME" | tr '/' '-')
          echo "BRANCH=$BRANCH" >> $GITHUB_ENV
          sha_short=${GITHUB_SHA::8}
          echo "sha_short=$sha_short" >> $GITHUB_ENV

          # Get PR number for better tag naming
          PR_NUMBER=$(gh pr list --head "$GITHUB_REF_NAME" --state open --json number --jq '.[0].number')
          if [ -n "$PR_NUMBER" ] && [ "$PR_NUMBER" != "null" ]; then
            echo "GORELEASER_CURRENT_TAG=v0.0.0-pr$PR_NUMBER-$sha_short" >> $GITHUB_ENV
          else
            echo "GORELEASER_CURRENT_TAG=v0.0.0-$BRANCH-$sha_short" >> $GITHUB_ENV
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/cache@v4
        with:
          path: dist/linux_amd64
          key: linux_amd64-${{ env.sha_short }}
          fail-on-cache-miss: true

      - uses: actions/cache@v4
        with:
          path: dist/linux_arm64
          key: linux_arm64-${{ env.sha_short }}
          fail-on-cache-miss: true

      - name: Build custom build environment
        run: docker build -f Dockerfile.build -t lakerunner-build .

      - name: Run GoReleaser Pro merge in custom container
        run: |
          docker run --rm \
            -v $PWD:/workspace \
            -v $PWD/.git:/workspace/.git \
            -w /workspace \
            -e GORELEASER_KEY="${{ secrets.GORELEASER_KEY }}" \
            -e GORELEASER_CURRENT_TAG="${GORELEASER_CURRENT_TAG}" \
            lakerunner-build \
            goreleaser continue --merge

      - name: Add build summary
        run: |
          echo "## Build Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Image Repository:** \`public.ecr.aws/cardinalhq.io/lakerunner\`" >> $GITHUB_STEP_SUMMARY
          echo "**Image Tag:** \`$GORELEASER_CURRENT_TAG\`" >> $GITHUB_STEP_SUMMARY
          echo "**Full Image:** \`public.ecr.aws/cardinalhq.io/lakerunner:$GORELEASER_CURRENT_TAG\`" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** \`$sha_short\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** Success" >> $GITHUB_STEP_SUMMARY

      - name: Add build failure summary
        if: failure()
        run: |
          echo "## Build Failed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** \`$sha_short\`" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** \`$GITHUB_REF_NAME\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Please check the [workflow run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details." >> $GITHUB_STEP_SUMMARY
