name: release

on:
  workflow_dispatch:
  push:
    tags:
      - "v*"
      - "!v*-*"

permissions:
  contents: write
  id-token: write
  packages: write

jobs:
  prepare:
    strategy:
      matrix:
        os:
          - ubuntu-22.04
          - ubuntu-22.04-arm
    runs-on: ${{ matrix.os }}
    env:
      DOCKER_CLI_EXPERIMENTAL: "enabled"
      flags: ""
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - uses: docker/setup-qemu-action@v3

      - uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials
        id: aws-credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          audience: sts.amazonaws.com
          role-to-assume: arn:aws:iam::${{ secrets.ECR_ACCOUNT_ID }}:role/${{ secrets.ECR_ROLE_NAME }}
          aws-region: ${{ secrets.ECR_REGISTRY_REGION }}
          role-session-name: GitHubActions

      - name: Login to PUBLIC Amazon ECR
        id: login-ecr-public
        env:
          AWS_REGION: us-east-1
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: public

      - uses: actions/setup-go@v5
        with:
          go-version: stable

      - name: Install protoc
        uses: arduino/setup-protoc@v3
        with:
          version: "29.x"
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install protoc Go plugins
        run: |
          go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
          go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest

      - if: ${{ github.event_name == 'workflow_dispatch' }}
        shell: bash
        run: |
          echo "flags=--nightly" >> $GITHUB_ENV

      - shell: bash
        run: |
          echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - uses: actions/cache@v4
        with:
          path: dist/${{ matrix.os == 'ubuntu-22.04' && 'linux_amd64' || 'linux_arm64' }}
          key: ${{ matrix.os == 'ubuntu-22.04' && 'linux_amd64' || 'linux_arm64' }}-${{ env.sha_short }}${{ env.flags }}

      # - shell: bash
      #   run: |
      #     cosign dockerfile verify --certificate-oidc-issuer https://accounts.google.com --certificate-identity keyless@distroless.iam.gserviceaccount.com Dockerfile

      - uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser-pro
          version: "~> v2"
          args: release --clean --config .goreleaser-release.yaml --split ${{ env.flags }}
        env:
          GORELEASER_KEY: ${{ secrets.GORELEASER_KEY }}
          DUCKDB_SDK_VERSION: v1.3.2

      - shell: bash
        run: |
          ls -lR dist

  release:
    runs-on: ubuntu-22.04
    needs: prepare
    env:
      DOCKER_CLI_EXPERIMENTAL: "enabled"
      flags: ""
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - uses: docker/setup-qemu-action@v3

      - uses: docker/setup-buildx-action@v3

      - uses: sigstore/cosign-installer@v3.9.2

      - uses: anchore/sbom-action/download-syft@v0.20.4

      - name: Configure AWS credentials
        id: aws-credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          audience: sts.amazonaws.com
          role-to-assume: arn:aws:iam::${{ secrets.ECR_ACCOUNT_ID }}:role/${{ secrets.ECR_ROLE_NAME }}
          aws-region: ${{ secrets.ECR_REGISTRY_REGION }}
          role-session-name: GitHubActions

      - name: Login to PUBLIC Amazon ECR
        id: login-ecr-public
        env:
          AWS_REGION: us-east-1
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: public

      - uses: actions/setup-go@v5
        with:
          go-version: stable

      - name: Install protoc
        uses: arduino/setup-protoc@v3
        with:
          version: "29.x"
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install protoc Go plugins
        run: |
          go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
          go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest

      # - shell: bash
      #   run: |
      #     cosign dockerfile verify --certificate-oidc-issuer https://accounts.google.com --certificate-identity keyless@distroless.iam.gserviceaccount.com Dockerfile

      - if: ${{ github.event_name == 'workflow_dispatch' }}
        shell: bash
        run: |
          echo "flags=--nightly" >> $GITHUB_ENV

      - shell: bash
        run: |
          echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - uses: actions/cache@v4
        id: cache_linux_amd64
        with:
          path: dist/linux_amd64
          key: linux_amd64-${{ env.sha_short }}${{ env.flags }}
          fail-on-cache-miss: true

      - uses: actions/cache@v4
        id: cache_linux_arm64
        with:
          path: dist/linux_arm64
          key: linux_arm64-${{ env.sha_short }}${{ env.flags }}
          fail-on-cache-miss: true

      # release
      - uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser-pro
          version: "~> v2"
          args: continue --config .goreleaser-release.yaml --merge
        env:
          GORELEASER_KEY: ${{ secrets.GORELEASER_KEY }}
          DUCKDB_SDK_VERSION: v1.3.2
