name: Build Release Candidate

on:
  push:
    tags:
      - "v*.*.*-*"

permissions:
  contents: write
  id-token: write
  packages: write

jobs:
  partials:
    strategy:
      matrix:
        os:
          - ubuntu-22.04
          - ubuntu-22.04-arm
    runs-on: ${{ matrix.os }}
    env:
      DOCKER_CLI_EXPERIMENTAL: "enabled"
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - uses: docker/setup-qemu-action@v3

      - uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          audience: sts.amazonaws.com
          role-to-assume: arn:aws:iam::${{ secrets.ECR_ACCOUNT_ID }}:role/${{ secrets.ECR_ROLE_NAME }}
          aws-region: ${{ secrets.ECR_REGISTRY_REGION }}
          role-session-name: GitHubActions

      - name: Login to PUBLIC Amazon ECR
        env:
          AWS_REGION: us-east-1
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: public

      - uses: actions/setup-go@v5
        with:
          go-version: stable

      - name: Run pre-flight checks
        run: |
          echo "Running pre-flight checks (no code generation)..."
          go test -race ./...
          go tool license-eye header check
          echo "Checking formatting..."
          test -z "$(gofmt -l . | grep -v '\.pb\.go$')" || (echo "Files need formatting:" && gofmt -l . | grep -v '\.pb\.go$' && exit 1)
          echo "Running linter..."
          go tool golangci-lint run --timeout 15m --config .golangci.yaml

      - shell: bash
        run: |
          echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - uses: actions/cache@v4
        with:
          path: dist/${{ matrix.os == 'ubuntu-22.04' && 'linux_amd64' || 'linux_arm64' }}
          key: ${{ matrix.os == 'ubuntu-22.04' && 'linux_amd64' || 'linux_arm64' }}-${{ env.sha_short }}

      - uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser-pro
          version: "~> v2"
          args: release --clean --split
        env:
          GORELEASER_KEY: ${{ secrets.GORELEASER_KEY }}
          DUCKDB_SDK_VERSION: v1.3.2

      - shell: bash
        run: |
          ls -lR dist

  merge:
    runs-on: ubuntu-22.04
    needs: partials
    env:
      DOCKER_CLI_EXPERIMENTAL: "enabled"
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - uses: docker/setup-qemu-action@v3

      - uses: docker/setup-buildx-action@v3

      - uses: sigstore/cosign-installer@v3.9.2

      - uses: anchore/sbom-action/download-syft@v0.20.4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          audience: sts.amazonaws.com
          role-to-assume: arn:aws:iam::${{ secrets.ECR_ACCOUNT_ID }}:role/${{ secrets.ECR_ROLE_NAME }}
          aws-region: ${{ secrets.ECR_REGISTRY_REGION }}
          role-session-name: GitHubActions

      - name: Login to PUBLIC Amazon ECR
        env:
          AWS_REGION: us-east-1
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: public

      - shell: bash
        run: |
          echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - uses: actions/cache@v4
        with:
          path: dist/linux_amd64
          key: linux_amd64-${{ env.sha_short }}
          fail-on-cache-miss: true

      - uses: actions/cache@v4
        with:
          path: dist/linux_arm64
          key: linux_arm64-${{ env.sha_short }}
          fail-on-cache-miss: true

      - uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser-pro
          version: "~> v2"
          args: continue --merge
        env:
          GORELEASER_KEY: ${{ secrets.GORELEASER_KEY }}
          DUCKDB_SDK_VERSION: v1.3.2

      - name: Output built images
        run: |
          echo "Release Candidate built successfully!"
          echo "Image: public.ecr.aws/cardinalhq.io/lakerunner:${{ github.ref_name }}"
          echo ""
          echo "Testing this RC before promotion:"
          echo "  1. Deploy to staging environment"
          echo "  2. Run integration tests"
          echo "  3. Validate functionality"
          echo ""
          echo "To promote to production, use the 'Promote Release' workflow"
